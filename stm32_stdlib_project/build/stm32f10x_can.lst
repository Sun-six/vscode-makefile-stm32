ARM GAS  /tmp/cc1CGZq2.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f10x_can.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CheckITStatus,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	CheckITStatus:
  25              	.LFB53:
  26              		.file 1 "./libraries/src/stm32f10x_can.c"
   1:./libraries/src/stm32f10x_can.c **** /**
   2:./libraries/src/stm32f10x_can.c ****   ******************************************************************************
   3:./libraries/src/stm32f10x_can.c ****   * @file    stm32f10x_can.c
   4:./libraries/src/stm32f10x_can.c ****   * @author  MCD Application Team
   5:./libraries/src/stm32f10x_can.c ****   * @version V3.5.0
   6:./libraries/src/stm32f10x_can.c ****   * @date    11-March-2011
   7:./libraries/src/stm32f10x_can.c ****   * @brief   This file provides all the CAN firmware functions.
   8:./libraries/src/stm32f10x_can.c ****   ******************************************************************************
   9:./libraries/src/stm32f10x_can.c ****   * @attention
  10:./libraries/src/stm32f10x_can.c ****   *
  11:./libraries/src/stm32f10x_can.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:./libraries/src/stm32f10x_can.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:./libraries/src/stm32f10x_can.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:./libraries/src/stm32f10x_can.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:./libraries/src/stm32f10x_can.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:./libraries/src/stm32f10x_can.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:./libraries/src/stm32f10x_can.c ****   *
  18:./libraries/src/stm32f10x_can.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:./libraries/src/stm32f10x_can.c ****   ******************************************************************************
  20:./libraries/src/stm32f10x_can.c ****   */
  21:./libraries/src/stm32f10x_can.c **** 
  22:./libraries/src/stm32f10x_can.c **** /* Includes ------------------------------------------------------------------*/
  23:./libraries/src/stm32f10x_can.c **** #include "stm32f10x_can.h"
  24:./libraries/src/stm32f10x_can.c **** #include "stm32f10x_rcc.h"
  25:./libraries/src/stm32f10x_can.c **** 
  26:./libraries/src/stm32f10x_can.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:./libraries/src/stm32f10x_can.c ****   * @{
  28:./libraries/src/stm32f10x_can.c ****   */
  29:./libraries/src/stm32f10x_can.c **** 
  30:./libraries/src/stm32f10x_can.c **** /** @defgroup CAN 
  31:./libraries/src/stm32f10x_can.c ****   * @brief CAN driver modules
  32:./libraries/src/stm32f10x_can.c ****   * @{
ARM GAS  /tmp/cc1CGZq2.s 			page 2


  33:./libraries/src/stm32f10x_can.c ****   */ 
  34:./libraries/src/stm32f10x_can.c **** 
  35:./libraries/src/stm32f10x_can.c **** /** @defgroup CAN_Private_TypesDefinitions
  36:./libraries/src/stm32f10x_can.c ****   * @{
  37:./libraries/src/stm32f10x_can.c ****   */
  38:./libraries/src/stm32f10x_can.c **** 
  39:./libraries/src/stm32f10x_can.c **** /**
  40:./libraries/src/stm32f10x_can.c ****   * @}
  41:./libraries/src/stm32f10x_can.c ****   */
  42:./libraries/src/stm32f10x_can.c **** 
  43:./libraries/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Defines
  44:./libraries/src/stm32f10x_can.c ****   * @{
  45:./libraries/src/stm32f10x_can.c ****   */
  46:./libraries/src/stm32f10x_can.c **** 
  47:./libraries/src/stm32f10x_can.c **** /* CAN Master Control Register bits */
  48:./libraries/src/stm32f10x_can.c **** 
  49:./libraries/src/stm32f10x_can.c **** #define MCR_DBF      ((uint32_t)0x00010000) /* software master reset */
  50:./libraries/src/stm32f10x_can.c **** 
  51:./libraries/src/stm32f10x_can.c **** /* CAN Mailbox Transmit Request */
  52:./libraries/src/stm32f10x_can.c **** #define TMIDxR_TXRQ  ((uint32_t)0x00000001) /* Transmit mailbox request */
  53:./libraries/src/stm32f10x_can.c **** 
  54:./libraries/src/stm32f10x_can.c **** /* CAN Filter Master Register bits */
  55:./libraries/src/stm32f10x_can.c **** #define FMR_FINIT    ((uint32_t)0x00000001) /* Filter init mode */
  56:./libraries/src/stm32f10x_can.c **** 
  57:./libraries/src/stm32f10x_can.c **** /* Time out for INAK bit */
  58:./libraries/src/stm32f10x_can.c **** #define INAK_TIMEOUT        ((uint32_t)0x0000FFFF)
  59:./libraries/src/stm32f10x_can.c **** /* Time out for SLAK bit */
  60:./libraries/src/stm32f10x_can.c **** #define SLAK_TIMEOUT        ((uint32_t)0x0000FFFF)
  61:./libraries/src/stm32f10x_can.c **** 
  62:./libraries/src/stm32f10x_can.c **** 
  63:./libraries/src/stm32f10x_can.c **** 
  64:./libraries/src/stm32f10x_can.c **** /* Flags in TSR register */
  65:./libraries/src/stm32f10x_can.c **** #define CAN_FLAGS_TSR              ((uint32_t)0x08000000) 
  66:./libraries/src/stm32f10x_can.c **** /* Flags in RF1R register */
  67:./libraries/src/stm32f10x_can.c **** #define CAN_FLAGS_RF1R             ((uint32_t)0x04000000) 
  68:./libraries/src/stm32f10x_can.c **** /* Flags in RF0R register */
  69:./libraries/src/stm32f10x_can.c **** #define CAN_FLAGS_RF0R             ((uint32_t)0x02000000) 
  70:./libraries/src/stm32f10x_can.c **** /* Flags in MSR register */
  71:./libraries/src/stm32f10x_can.c **** #define CAN_FLAGS_MSR              ((uint32_t)0x01000000) 
  72:./libraries/src/stm32f10x_can.c **** /* Flags in ESR register */
  73:./libraries/src/stm32f10x_can.c **** #define CAN_FLAGS_ESR              ((uint32_t)0x00F00000) 
  74:./libraries/src/stm32f10x_can.c **** 
  75:./libraries/src/stm32f10x_can.c **** /* Mailboxes definition */
  76:./libraries/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_0                   ((uint8_t)0x00)
  77:./libraries/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_1                   ((uint8_t)0x01)
  78:./libraries/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_2                   ((uint8_t)0x02) 
  79:./libraries/src/stm32f10x_can.c **** 
  80:./libraries/src/stm32f10x_can.c **** 
  81:./libraries/src/stm32f10x_can.c **** 
  82:./libraries/src/stm32f10x_can.c **** #define CAN_MODE_MASK              ((uint32_t) 0x00000003)
  83:./libraries/src/stm32f10x_can.c **** /**
  84:./libraries/src/stm32f10x_can.c ****   * @}
  85:./libraries/src/stm32f10x_can.c ****   */
  86:./libraries/src/stm32f10x_can.c **** 
  87:./libraries/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Macros
  88:./libraries/src/stm32f10x_can.c ****   * @{
  89:./libraries/src/stm32f10x_can.c ****   */
ARM GAS  /tmp/cc1CGZq2.s 			page 3


  90:./libraries/src/stm32f10x_can.c **** 
  91:./libraries/src/stm32f10x_can.c **** /**
  92:./libraries/src/stm32f10x_can.c ****   * @}
  93:./libraries/src/stm32f10x_can.c ****   */
  94:./libraries/src/stm32f10x_can.c **** 
  95:./libraries/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Variables
  96:./libraries/src/stm32f10x_can.c ****   * @{
  97:./libraries/src/stm32f10x_can.c ****   */
  98:./libraries/src/stm32f10x_can.c **** 
  99:./libraries/src/stm32f10x_can.c **** /**
 100:./libraries/src/stm32f10x_can.c ****   * @}
 101:./libraries/src/stm32f10x_can.c ****   */
 102:./libraries/src/stm32f10x_can.c **** 
 103:./libraries/src/stm32f10x_can.c **** /** @defgroup CAN_Private_FunctionPrototypes
 104:./libraries/src/stm32f10x_can.c ****   * @{
 105:./libraries/src/stm32f10x_can.c ****   */
 106:./libraries/src/stm32f10x_can.c **** 
 107:./libraries/src/stm32f10x_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 108:./libraries/src/stm32f10x_can.c **** 
 109:./libraries/src/stm32f10x_can.c **** /**
 110:./libraries/src/stm32f10x_can.c ****   * @}
 111:./libraries/src/stm32f10x_can.c ****   */
 112:./libraries/src/stm32f10x_can.c **** 
 113:./libraries/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Functions
 114:./libraries/src/stm32f10x_can.c ****   * @{
 115:./libraries/src/stm32f10x_can.c ****   */
 116:./libraries/src/stm32f10x_can.c **** 
 117:./libraries/src/stm32f10x_can.c **** /**
 118:./libraries/src/stm32f10x_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 119:./libraries/src/stm32f10x_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 120:./libraries/src/stm32f10x_can.c ****   * @retval None.
 121:./libraries/src/stm32f10x_can.c ****   */
 122:./libraries/src/stm32f10x_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 123:./libraries/src/stm32f10x_can.c **** {
 124:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 125:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 126:./libraries/src/stm32f10x_can.c ****  
 127:./libraries/src/stm32f10x_can.c ****   if (CANx == CAN1)
 128:./libraries/src/stm32f10x_can.c ****   {
 129:./libraries/src/stm32f10x_can.c ****     /* Enable CAN1 reset state */
 130:./libraries/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 131:./libraries/src/stm32f10x_can.c ****     /* Release CAN1 from reset state */
 132:./libraries/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 133:./libraries/src/stm32f10x_can.c ****   }
 134:./libraries/src/stm32f10x_can.c ****   else
 135:./libraries/src/stm32f10x_can.c ****   {  
 136:./libraries/src/stm32f10x_can.c ****     /* Enable CAN2 reset state */
 137:./libraries/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 138:./libraries/src/stm32f10x_can.c ****     /* Release CAN2 from reset state */
 139:./libraries/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 140:./libraries/src/stm32f10x_can.c ****   }
 141:./libraries/src/stm32f10x_can.c **** }
 142:./libraries/src/stm32f10x_can.c **** 
 143:./libraries/src/stm32f10x_can.c **** /**
 144:./libraries/src/stm32f10x_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 145:./libraries/src/stm32f10x_can.c ****   *         parameters in the CAN_InitStruct.
 146:./libraries/src/stm32f10x_can.c ****   * @param  CANx:           where x can be 1 or 2 to to select the CAN 
ARM GAS  /tmp/cc1CGZq2.s 			page 4


 147:./libraries/src/stm32f10x_can.c ****   *                         peripheral.
 148:./libraries/src/stm32f10x_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that
 149:./libraries/src/stm32f10x_can.c ****   *                         contains the configuration information for the 
 150:./libraries/src/stm32f10x_can.c ****   *                         CAN peripheral.
 151:./libraries/src/stm32f10x_can.c ****   * @retval Constant indicates initialization succeed which will be 
 152:./libraries/src/stm32f10x_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 153:./libraries/src/stm32f10x_can.c ****   */
 154:./libraries/src/stm32f10x_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 155:./libraries/src/stm32f10x_can.c **** {
 156:./libraries/src/stm32f10x_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 157:./libraries/src/stm32f10x_can.c ****   uint32_t wait_ack = 0x00000000;
 158:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 159:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 160:./libraries/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 161:./libraries/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 162:./libraries/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 163:./libraries/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 164:./libraries/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 165:./libraries/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 166:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 167:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 168:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 169:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 170:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 171:./libraries/src/stm32f10x_can.c **** 
 172:./libraries/src/stm32f10x_can.c ****   /* Exit from sleep mode */
 173:./libraries/src/stm32f10x_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 174:./libraries/src/stm32f10x_can.c **** 
 175:./libraries/src/stm32f10x_can.c ****   /* Request initialisation */
 176:./libraries/src/stm32f10x_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 177:./libraries/src/stm32f10x_can.c **** 
 178:./libraries/src/stm32f10x_can.c ****   /* Wait the acknowledge */
 179:./libraries/src/stm32f10x_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 180:./libraries/src/stm32f10x_can.c ****   {
 181:./libraries/src/stm32f10x_can.c ****     wait_ack++;
 182:./libraries/src/stm32f10x_can.c ****   }
 183:./libraries/src/stm32f10x_can.c **** 
 184:./libraries/src/stm32f10x_can.c ****   /* Check acknowledge */
 185:./libraries/src/stm32f10x_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 186:./libraries/src/stm32f10x_can.c ****   {
 187:./libraries/src/stm32f10x_can.c ****     InitStatus = CAN_InitStatus_Failed;
 188:./libraries/src/stm32f10x_can.c ****   }
 189:./libraries/src/stm32f10x_can.c ****   else 
 190:./libraries/src/stm32f10x_can.c ****   {
 191:./libraries/src/stm32f10x_can.c ****     /* Set the time triggered communication mode */
 192:./libraries/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 193:./libraries/src/stm32f10x_can.c ****     {
 194:./libraries/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 195:./libraries/src/stm32f10x_can.c ****     }
 196:./libraries/src/stm32f10x_can.c ****     else
 197:./libraries/src/stm32f10x_can.c ****     {
 198:./libraries/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 199:./libraries/src/stm32f10x_can.c ****     }
 200:./libraries/src/stm32f10x_can.c **** 
 201:./libraries/src/stm32f10x_can.c ****     /* Set the automatic bus-off management */
 202:./libraries/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 203:./libraries/src/stm32f10x_can.c ****     {
ARM GAS  /tmp/cc1CGZq2.s 			page 5


 204:./libraries/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 205:./libraries/src/stm32f10x_can.c ****     }
 206:./libraries/src/stm32f10x_can.c ****     else
 207:./libraries/src/stm32f10x_can.c ****     {
 208:./libraries/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 209:./libraries/src/stm32f10x_can.c ****     }
 210:./libraries/src/stm32f10x_can.c **** 
 211:./libraries/src/stm32f10x_can.c ****     /* Set the automatic wake-up mode */
 212:./libraries/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 213:./libraries/src/stm32f10x_can.c ****     {
 214:./libraries/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 215:./libraries/src/stm32f10x_can.c ****     }
 216:./libraries/src/stm32f10x_can.c ****     else
 217:./libraries/src/stm32f10x_can.c ****     {
 218:./libraries/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 219:./libraries/src/stm32f10x_can.c ****     }
 220:./libraries/src/stm32f10x_can.c **** 
 221:./libraries/src/stm32f10x_can.c ****     /* Set the no automatic retransmission */
 222:./libraries/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 223:./libraries/src/stm32f10x_can.c ****     {
 224:./libraries/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_NART;
 225:./libraries/src/stm32f10x_can.c ****     }
 226:./libraries/src/stm32f10x_can.c ****     else
 227:./libraries/src/stm32f10x_can.c ****     {
 228:./libraries/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 229:./libraries/src/stm32f10x_can.c ****     }
 230:./libraries/src/stm32f10x_can.c **** 
 231:./libraries/src/stm32f10x_can.c ****     /* Set the receive FIFO locked mode */
 232:./libraries/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 233:./libraries/src/stm32f10x_can.c ****     {
 234:./libraries/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 235:./libraries/src/stm32f10x_can.c ****     }
 236:./libraries/src/stm32f10x_can.c ****     else
 237:./libraries/src/stm32f10x_can.c ****     {
 238:./libraries/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 239:./libraries/src/stm32f10x_can.c ****     }
 240:./libraries/src/stm32f10x_can.c **** 
 241:./libraries/src/stm32f10x_can.c ****     /* Set the transmit FIFO priority */
 242:./libraries/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 243:./libraries/src/stm32f10x_can.c ****     {
 244:./libraries/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 245:./libraries/src/stm32f10x_can.c ****     }
 246:./libraries/src/stm32f10x_can.c ****     else
 247:./libraries/src/stm32f10x_can.c ****     {
 248:./libraries/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 249:./libraries/src/stm32f10x_can.c ****     }
 250:./libraries/src/stm32f10x_can.c **** 
 251:./libraries/src/stm32f10x_can.c ****     /* Set the bit timing register */
 252:./libraries/src/stm32f10x_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 253:./libraries/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 254:./libraries/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 255:./libraries/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 256:./libraries/src/stm32f10x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 257:./libraries/src/stm32f10x_can.c **** 
 258:./libraries/src/stm32f10x_can.c ****     /* Request leave initialisation */
 259:./libraries/src/stm32f10x_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 260:./libraries/src/stm32f10x_can.c **** 
ARM GAS  /tmp/cc1CGZq2.s 			page 6


 261:./libraries/src/stm32f10x_can.c ****    /* Wait the acknowledge */
 262:./libraries/src/stm32f10x_can.c ****    wait_ack = 0;
 263:./libraries/src/stm32f10x_can.c **** 
 264:./libraries/src/stm32f10x_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 265:./libraries/src/stm32f10x_can.c ****    {
 266:./libraries/src/stm32f10x_can.c ****      wait_ack++;
 267:./libraries/src/stm32f10x_can.c ****    }
 268:./libraries/src/stm32f10x_can.c **** 
 269:./libraries/src/stm32f10x_can.c ****     /* ...and check acknowledged */
 270:./libraries/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 271:./libraries/src/stm32f10x_can.c ****     {
 272:./libraries/src/stm32f10x_can.c ****       InitStatus = CAN_InitStatus_Failed;
 273:./libraries/src/stm32f10x_can.c ****     }
 274:./libraries/src/stm32f10x_can.c ****     else
 275:./libraries/src/stm32f10x_can.c ****     {
 276:./libraries/src/stm32f10x_can.c ****       InitStatus = CAN_InitStatus_Success ;
 277:./libraries/src/stm32f10x_can.c ****     }
 278:./libraries/src/stm32f10x_can.c ****   }
 279:./libraries/src/stm32f10x_can.c **** 
 280:./libraries/src/stm32f10x_can.c ****   /* At this step, return the status of initialization */
 281:./libraries/src/stm32f10x_can.c ****   return InitStatus;
 282:./libraries/src/stm32f10x_can.c **** }
 283:./libraries/src/stm32f10x_can.c **** 
 284:./libraries/src/stm32f10x_can.c **** /**
 285:./libraries/src/stm32f10x_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 286:./libraries/src/stm32f10x_can.c ****   *         parameters in the CAN_FilterInitStruct.
 287:./libraries/src/stm32f10x_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef
 288:./libraries/src/stm32f10x_can.c ****   *                               structure that contains the configuration 
 289:./libraries/src/stm32f10x_can.c ****   *                               information.
 290:./libraries/src/stm32f10x_can.c ****   * @retval None.
 291:./libraries/src/stm32f10x_can.c ****   */
 292:./libraries/src/stm32f10x_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 293:./libraries/src/stm32f10x_can.c **** {
 294:./libraries/src/stm32f10x_can.c ****   uint32_t filter_number_bit_pos = 0;
 295:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 296:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 297:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 298:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 299:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 300:./libraries/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 301:./libraries/src/stm32f10x_can.c **** 
 302:./libraries/src/stm32f10x_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 303:./libraries/src/stm32f10x_can.c **** 
 304:./libraries/src/stm32f10x_can.c ****   /* Initialisation mode for the filter */
 305:./libraries/src/stm32f10x_can.c ****   CAN1->FMR |= FMR_FINIT;
 306:./libraries/src/stm32f10x_can.c **** 
 307:./libraries/src/stm32f10x_can.c ****   /* Filter Deactivation */
 308:./libraries/src/stm32f10x_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 309:./libraries/src/stm32f10x_can.c **** 
 310:./libraries/src/stm32f10x_can.c ****   /* Filter Scale */
 311:./libraries/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 312:./libraries/src/stm32f10x_can.c ****   {
 313:./libraries/src/stm32f10x_can.c ****     /* 16-bit scale for the filter */
 314:./libraries/src/stm32f10x_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 315:./libraries/src/stm32f10x_can.c **** 
 316:./libraries/src/stm32f10x_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 317:./libraries/src/stm32f10x_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
ARM GAS  /tmp/cc1CGZq2.s 			page 7


 318:./libraries/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 319:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 320:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 321:./libraries/src/stm32f10x_can.c **** 
 322:./libraries/src/stm32f10x_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 323:./libraries/src/stm32f10x_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 324:./libraries/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 325:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 326:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 327:./libraries/src/stm32f10x_can.c ****   }
 328:./libraries/src/stm32f10x_can.c **** 
 329:./libraries/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 330:./libraries/src/stm32f10x_can.c ****   {
 331:./libraries/src/stm32f10x_can.c ****     /* 32-bit scale for the filter */
 332:./libraries/src/stm32f10x_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 333:./libraries/src/stm32f10x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 334:./libraries/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 335:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 336:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 337:./libraries/src/stm32f10x_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 338:./libraries/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 339:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 340:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 341:./libraries/src/stm32f10x_can.c ****   }
 342:./libraries/src/stm32f10x_can.c **** 
 343:./libraries/src/stm32f10x_can.c ****   /* Filter Mode */
 344:./libraries/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 345:./libraries/src/stm32f10x_can.c ****   {
 346:./libraries/src/stm32f10x_can.c ****     /*Id/Mask mode for the filter*/
 347:./libraries/src/stm32f10x_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 348:./libraries/src/stm32f10x_can.c ****   }
 349:./libraries/src/stm32f10x_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 350:./libraries/src/stm32f10x_can.c ****   {
 351:./libraries/src/stm32f10x_can.c ****     /*Identifier list mode for the filter*/
 352:./libraries/src/stm32f10x_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 353:./libraries/src/stm32f10x_can.c ****   }
 354:./libraries/src/stm32f10x_can.c **** 
 355:./libraries/src/stm32f10x_can.c ****   /* Filter FIFO assignment */
 356:./libraries/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 357:./libraries/src/stm32f10x_can.c ****   {
 358:./libraries/src/stm32f10x_can.c ****     /* FIFO 0 assignation for the filter */
 359:./libraries/src/stm32f10x_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 360:./libraries/src/stm32f10x_can.c ****   }
 361:./libraries/src/stm32f10x_can.c **** 
 362:./libraries/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 363:./libraries/src/stm32f10x_can.c ****   {
 364:./libraries/src/stm32f10x_can.c ****     /* FIFO 1 assignation for the filter */
 365:./libraries/src/stm32f10x_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 366:./libraries/src/stm32f10x_can.c ****   }
 367:./libraries/src/stm32f10x_can.c ****   
 368:./libraries/src/stm32f10x_can.c ****   /* Filter activation */
 369:./libraries/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 370:./libraries/src/stm32f10x_can.c ****   {
 371:./libraries/src/stm32f10x_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 372:./libraries/src/stm32f10x_can.c ****   }
 373:./libraries/src/stm32f10x_can.c **** 
 374:./libraries/src/stm32f10x_can.c ****   /* Leave the initialisation mode for the filter */
ARM GAS  /tmp/cc1CGZq2.s 			page 8


 375:./libraries/src/stm32f10x_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 376:./libraries/src/stm32f10x_can.c **** }
 377:./libraries/src/stm32f10x_can.c **** 
 378:./libraries/src/stm32f10x_can.c **** /**
 379:./libraries/src/stm32f10x_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 380:./libraries/src/stm32f10x_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which
 381:./libraries/src/stm32f10x_can.c ****   *                         will be initialized.
 382:./libraries/src/stm32f10x_can.c ****   * @retval None.
 383:./libraries/src/stm32f10x_can.c ****   */
 384:./libraries/src/stm32f10x_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 385:./libraries/src/stm32f10x_can.c **** {
 386:./libraries/src/stm32f10x_can.c ****   /* Reset CAN init structure parameters values */
 387:./libraries/src/stm32f10x_can.c ****   
 388:./libraries/src/stm32f10x_can.c ****   /* Initialize the time triggered communication mode */
 389:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 390:./libraries/src/stm32f10x_can.c ****   
 391:./libraries/src/stm32f10x_can.c ****   /* Initialize the automatic bus-off management */
 392:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 393:./libraries/src/stm32f10x_can.c ****   
 394:./libraries/src/stm32f10x_can.c ****   /* Initialize the automatic wake-up mode */
 395:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 396:./libraries/src/stm32f10x_can.c ****   
 397:./libraries/src/stm32f10x_can.c ****   /* Initialize the no automatic retransmission */
 398:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 399:./libraries/src/stm32f10x_can.c ****   
 400:./libraries/src/stm32f10x_can.c ****   /* Initialize the receive FIFO locked mode */
 401:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 402:./libraries/src/stm32f10x_can.c ****   
 403:./libraries/src/stm32f10x_can.c ****   /* Initialize the transmit FIFO priority */
 404:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 405:./libraries/src/stm32f10x_can.c ****   
 406:./libraries/src/stm32f10x_can.c ****   /* Initialize the CAN_Mode member */
 407:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 408:./libraries/src/stm32f10x_can.c ****   
 409:./libraries/src/stm32f10x_can.c ****   /* Initialize the CAN_SJW member */
 410:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 411:./libraries/src/stm32f10x_can.c ****   
 412:./libraries/src/stm32f10x_can.c ****   /* Initialize the CAN_BS1 member */
 413:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 414:./libraries/src/stm32f10x_can.c ****   
 415:./libraries/src/stm32f10x_can.c ****   /* Initialize the CAN_BS2 member */
 416:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 417:./libraries/src/stm32f10x_can.c ****   
 418:./libraries/src/stm32f10x_can.c ****   /* Initialize the CAN_Prescaler member */
 419:./libraries/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 420:./libraries/src/stm32f10x_can.c **** }
 421:./libraries/src/stm32f10x_can.c **** 
 422:./libraries/src/stm32f10x_can.c **** /**
 423:./libraries/src/stm32f10x_can.c ****   * @brief  Select the start bank filter for slave CAN.
 424:./libraries/src/stm32f10x_can.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 425:./libraries/src/stm32f10x_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 426:./libraries/src/stm32f10x_can.c ****   * @retval None.
 427:./libraries/src/stm32f10x_can.c ****   */
 428:./libraries/src/stm32f10x_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 429:./libraries/src/stm32f10x_can.c **** {
 430:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 431:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
ARM GAS  /tmp/cc1CGZq2.s 			page 9


 432:./libraries/src/stm32f10x_can.c ****   
 433:./libraries/src/stm32f10x_can.c ****   /* Enter Initialisation mode for the filter */
 434:./libraries/src/stm32f10x_can.c ****   CAN1->FMR |= FMR_FINIT;
 435:./libraries/src/stm32f10x_can.c ****   
 436:./libraries/src/stm32f10x_can.c ****   /* Select the start slave bank */
 437:./libraries/src/stm32f10x_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 438:./libraries/src/stm32f10x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 439:./libraries/src/stm32f10x_can.c ****   
 440:./libraries/src/stm32f10x_can.c ****   /* Leave Initialisation mode for the filter */
 441:./libraries/src/stm32f10x_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 442:./libraries/src/stm32f10x_can.c **** }
 443:./libraries/src/stm32f10x_can.c **** 
 444:./libraries/src/stm32f10x_can.c **** /**
 445:./libraries/src/stm32f10x_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 446:./libraries/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
 447:./libraries/src/stm32f10x_can.c ****   * @param  NewState: new state of the CAN peripheral. This parameter can 
 448:./libraries/src/stm32f10x_can.c ****   *                   be: ENABLE or DISABLE.
 449:./libraries/src/stm32f10x_can.c ****   * @retval None.
 450:./libraries/src/stm32f10x_can.c ****   */
 451:./libraries/src/stm32f10x_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 452:./libraries/src/stm32f10x_can.c **** {
 453:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 454:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 455:./libraries/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 456:./libraries/src/stm32f10x_can.c ****   
 457:./libraries/src/stm32f10x_can.c ****   if (NewState != DISABLE)
 458:./libraries/src/stm32f10x_can.c ****   {
 459:./libraries/src/stm32f10x_can.c ****     /* Enable Debug Freeze  */
 460:./libraries/src/stm32f10x_can.c ****     CANx->MCR |= MCR_DBF;
 461:./libraries/src/stm32f10x_can.c ****   }
 462:./libraries/src/stm32f10x_can.c ****   else
 463:./libraries/src/stm32f10x_can.c ****   {
 464:./libraries/src/stm32f10x_can.c ****     /* Disable Debug Freeze */
 465:./libraries/src/stm32f10x_can.c ****     CANx->MCR &= ~MCR_DBF;
 466:./libraries/src/stm32f10x_can.c ****   }
 467:./libraries/src/stm32f10x_can.c **** }
 468:./libraries/src/stm32f10x_can.c **** 
 469:./libraries/src/stm32f10x_can.c **** 
 470:./libraries/src/stm32f10x_can.c **** /**
 471:./libraries/src/stm32f10x_can.c ****   * @brief  Enables or disabes the CAN Time TriggerOperation communication mode.
 472:./libraries/src/stm32f10x_can.c ****   * @param  CANx:      where x can be 1 or 2 to to select the CAN peripheral.
 473:./libraries/src/stm32f10x_can.c ****   * @param  NewState : Mode new state , can be one of @ref FunctionalState.
 474:./libraries/src/stm32f10x_can.c ****   * @note   when enabled, Time stamp (TIME[15:0]) value is sent in the last 
 475:./libraries/src/stm32f10x_can.c ****   *         two data bytes of the 8-byte message: TIME[7:0] in data byte 6 
 476:./libraries/src/stm32f10x_can.c ****   *         and TIME[15:8] in data byte 7 
 477:./libraries/src/stm32f10x_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 478:./libraries/src/stm32f10x_can.c ****   *         sent over the CAN bus.  
 479:./libraries/src/stm32f10x_can.c ****   * @retval None
 480:./libraries/src/stm32f10x_can.c ****   */
 481:./libraries/src/stm32f10x_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 482:./libraries/src/stm32f10x_can.c **** {
 483:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 484:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 485:./libraries/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:./libraries/src/stm32f10x_can.c ****   if (NewState != DISABLE)
 487:./libraries/src/stm32f10x_can.c ****   {
 488:./libraries/src/stm32f10x_can.c ****     /* Enable the TTCM mode */
ARM GAS  /tmp/cc1CGZq2.s 			page 10


 489:./libraries/src/stm32f10x_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 490:./libraries/src/stm32f10x_can.c **** 
 491:./libraries/src/stm32f10x_can.c ****     /* Set TGT bits */
 492:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 493:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 494:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 495:./libraries/src/stm32f10x_can.c ****   }
 496:./libraries/src/stm32f10x_can.c ****   else
 497:./libraries/src/stm32f10x_can.c ****   {
 498:./libraries/src/stm32f10x_can.c ****     /* Disable the TTCM mode */
 499:./libraries/src/stm32f10x_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 500:./libraries/src/stm32f10x_can.c **** 
 501:./libraries/src/stm32f10x_can.c ****     /* Reset TGT bits */
 502:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 503:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 504:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 505:./libraries/src/stm32f10x_can.c ****   }
 506:./libraries/src/stm32f10x_can.c **** }
 507:./libraries/src/stm32f10x_can.c **** /**
 508:./libraries/src/stm32f10x_can.c ****   * @brief  Initiates the transmission of a message.
 509:./libraries/src/stm32f10x_can.c ****   * @param  CANx:      where x can be 1 or 2 to to select the CAN peripheral.
 510:./libraries/src/stm32f10x_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN
 511:./libraries/src/stm32f10x_can.c ****   *                    DLC and CAN data.
 512:./libraries/src/stm32f10x_can.c ****   * @retval The number of the mailbox that is used for transmission
 513:./libraries/src/stm32f10x_can.c ****   *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
 514:./libraries/src/stm32f10x_can.c ****   */
 515:./libraries/src/stm32f10x_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 516:./libraries/src/stm32f10x_can.c **** {
 517:./libraries/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 518:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 519:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 520:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 521:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 522:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 523:./libraries/src/stm32f10x_can.c **** 
 524:./libraries/src/stm32f10x_can.c ****   /* Select one empty transmit mailbox */
 525:./libraries/src/stm32f10x_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 526:./libraries/src/stm32f10x_can.c ****   {
 527:./libraries/src/stm32f10x_can.c ****     transmit_mailbox = 0;
 528:./libraries/src/stm32f10x_can.c ****   }
 529:./libraries/src/stm32f10x_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 530:./libraries/src/stm32f10x_can.c ****   {
 531:./libraries/src/stm32f10x_can.c ****     transmit_mailbox = 1;
 532:./libraries/src/stm32f10x_can.c ****   }
 533:./libraries/src/stm32f10x_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 534:./libraries/src/stm32f10x_can.c ****   {
 535:./libraries/src/stm32f10x_can.c ****     transmit_mailbox = 2;
 536:./libraries/src/stm32f10x_can.c ****   }
 537:./libraries/src/stm32f10x_can.c ****   else
 538:./libraries/src/stm32f10x_can.c ****   {
 539:./libraries/src/stm32f10x_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 540:./libraries/src/stm32f10x_can.c ****   }
 541:./libraries/src/stm32f10x_can.c **** 
 542:./libraries/src/stm32f10x_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 543:./libraries/src/stm32f10x_can.c ****   {
 544:./libraries/src/stm32f10x_can.c ****     /* Set up the Id */
 545:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
ARM GAS  /tmp/cc1CGZq2.s 			page 11


 546:./libraries/src/stm32f10x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 547:./libraries/src/stm32f10x_can.c ****     {
 548:./libraries/src/stm32f10x_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 549:./libraries/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 550:./libraries/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 551:./libraries/src/stm32f10x_can.c ****     }
 552:./libraries/src/stm32f10x_can.c ****     else
 553:./libraries/src/stm32f10x_can.c ****     {
 554:./libraries/src/stm32f10x_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 555:./libraries/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 556:./libraries/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 557:./libraries/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 558:./libraries/src/stm32f10x_can.c ****     }
 559:./libraries/src/stm32f10x_can.c ****     
 560:./libraries/src/stm32f10x_can.c ****     /* Set up the DLC */
 561:./libraries/src/stm32f10x_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 562:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 563:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 564:./libraries/src/stm32f10x_can.c **** 
 565:./libraries/src/stm32f10x_can.c ****     /* Set up the data field */
 566:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 567:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 568:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 569:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 570:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 571:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 572:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 573:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 574:./libraries/src/stm32f10x_can.c ****     /* Request transmission */
 575:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 576:./libraries/src/stm32f10x_can.c ****   }
 577:./libraries/src/stm32f10x_can.c ****   return transmit_mailbox;
 578:./libraries/src/stm32f10x_can.c **** }
 579:./libraries/src/stm32f10x_can.c **** 
 580:./libraries/src/stm32f10x_can.c **** /**
 581:./libraries/src/stm32f10x_can.c ****   * @brief  Checks the transmission of a message.
 582:./libraries/src/stm32f10x_can.c ****   * @param  CANx:            where x can be 1 or 2 to to select the 
 583:./libraries/src/stm32f10x_can.c ****   *                          CAN peripheral.
 584:./libraries/src/stm32f10x_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for 
 585:./libraries/src/stm32f10x_can.c ****   *                          transmission.
 586:./libraries/src/stm32f10x_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, CAN_TxStatus_Failed 
 587:./libraries/src/stm32f10x_can.c ****   *         in an other case.
 588:./libraries/src/stm32f10x_can.c ****   */
 589:./libraries/src/stm32f10x_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 590:./libraries/src/stm32f10x_can.c **** {
 591:./libraries/src/stm32f10x_can.c ****   uint32_t state = 0;
 592:./libraries/src/stm32f10x_can.c **** 
 593:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 594:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 595:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 596:./libraries/src/stm32f10x_can.c ****  
 597:./libraries/src/stm32f10x_can.c ****   switch (TransmitMailbox)
 598:./libraries/src/stm32f10x_can.c ****   {
 599:./libraries/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_0): 
 600:./libraries/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 601:./libraries/src/stm32f10x_can.c ****       break;
 602:./libraries/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): 
ARM GAS  /tmp/cc1CGZq2.s 			page 12


 603:./libraries/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 604:./libraries/src/stm32f10x_can.c ****       break;
 605:./libraries/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): 
 606:./libraries/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 607:./libraries/src/stm32f10x_can.c ****       break;
 608:./libraries/src/stm32f10x_can.c ****     default:
 609:./libraries/src/stm32f10x_can.c ****       state = CAN_TxStatus_Failed;
 610:./libraries/src/stm32f10x_can.c ****       break;
 611:./libraries/src/stm32f10x_can.c ****   }
 612:./libraries/src/stm32f10x_can.c ****   switch (state)
 613:./libraries/src/stm32f10x_can.c ****   {
 614:./libraries/src/stm32f10x_can.c ****       /* transmit pending  */
 615:./libraries/src/stm32f10x_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 616:./libraries/src/stm32f10x_can.c ****       break;
 617:./libraries/src/stm32f10x_can.c ****       /* transmit failed  */
 618:./libraries/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 619:./libraries/src/stm32f10x_can.c ****       break;
 620:./libraries/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 621:./libraries/src/stm32f10x_can.c ****       break;
 622:./libraries/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 623:./libraries/src/stm32f10x_can.c ****       break;
 624:./libraries/src/stm32f10x_can.c ****       /* transmit succeeded  */
 625:./libraries/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 626:./libraries/src/stm32f10x_can.c ****       break;
 627:./libraries/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 628:./libraries/src/stm32f10x_can.c ****       break;
 629:./libraries/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 630:./libraries/src/stm32f10x_can.c ****       break;
 631:./libraries/src/stm32f10x_can.c ****     default: state = CAN_TxStatus_Failed;
 632:./libraries/src/stm32f10x_can.c ****       break;
 633:./libraries/src/stm32f10x_can.c ****   }
 634:./libraries/src/stm32f10x_can.c ****   return (uint8_t) state;
 635:./libraries/src/stm32f10x_can.c **** }
 636:./libraries/src/stm32f10x_can.c **** 
 637:./libraries/src/stm32f10x_can.c **** /**
 638:./libraries/src/stm32f10x_can.c ****   * @brief  Cancels a transmit request.
 639:./libraries/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral. 
 640:./libraries/src/stm32f10x_can.c ****   * @param  Mailbox:  Mailbox number.
 641:./libraries/src/stm32f10x_can.c ****   * @retval None.
 642:./libraries/src/stm32f10x_can.c ****   */
 643:./libraries/src/stm32f10x_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 644:./libraries/src/stm32f10x_can.c **** {
 645:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 646:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 647:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 648:./libraries/src/stm32f10x_can.c ****   /* abort transmission */
 649:./libraries/src/stm32f10x_can.c ****   switch (Mailbox)
 650:./libraries/src/stm32f10x_can.c ****   {
 651:./libraries/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 652:./libraries/src/stm32f10x_can.c ****       break;
 653:./libraries/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 654:./libraries/src/stm32f10x_can.c ****       break;
 655:./libraries/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 656:./libraries/src/stm32f10x_can.c ****       break;
 657:./libraries/src/stm32f10x_can.c ****     default:
 658:./libraries/src/stm32f10x_can.c ****       break;
 659:./libraries/src/stm32f10x_can.c ****   }
ARM GAS  /tmp/cc1CGZq2.s 			page 13


 660:./libraries/src/stm32f10x_can.c **** }
 661:./libraries/src/stm32f10x_can.c **** 
 662:./libraries/src/stm32f10x_can.c **** 
 663:./libraries/src/stm32f10x_can.c **** /**
 664:./libraries/src/stm32f10x_can.c ****   * @brief  Receives a message.
 665:./libraries/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral.
 666:./libraries/src/stm32f10x_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 667:./libraries/src/stm32f10x_can.c ****   * @param  RxMessage:  pointer to a structure receive message which contains 
 668:./libraries/src/stm32f10x_can.c ****   *                     CAN Id, CAN DLC, CAN datas and FMI number.
 669:./libraries/src/stm32f10x_can.c ****   * @retval None.
 670:./libraries/src/stm32f10x_can.c ****   */
 671:./libraries/src/stm32f10x_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 672:./libraries/src/stm32f10x_can.c **** {
 673:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 674:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 675:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 676:./libraries/src/stm32f10x_can.c ****   /* Get the Id */
 677:./libraries/src/stm32f10x_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 678:./libraries/src/stm32f10x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 679:./libraries/src/stm32f10x_can.c ****   {
 680:./libraries/src/stm32f10x_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 681:./libraries/src/stm32f10x_can.c ****   }
 682:./libraries/src/stm32f10x_can.c ****   else
 683:./libraries/src/stm32f10x_can.c ****   {
 684:./libraries/src/stm32f10x_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 685:./libraries/src/stm32f10x_can.c ****   }
 686:./libraries/src/stm32f10x_can.c ****   
 687:./libraries/src/stm32f10x_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 688:./libraries/src/stm32f10x_can.c ****   /* Get the DLC */
 689:./libraries/src/stm32f10x_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 690:./libraries/src/stm32f10x_can.c ****   /* Get the FMI */
 691:./libraries/src/stm32f10x_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 692:./libraries/src/stm32f10x_can.c ****   /* Get the data field */
 693:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 694:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 695:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 696:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 697:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 698:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 699:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 700:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 701:./libraries/src/stm32f10x_can.c ****   /* Release the FIFO */
 702:./libraries/src/stm32f10x_can.c ****   /* Release FIFO0 */
 703:./libraries/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 704:./libraries/src/stm32f10x_can.c ****   {
 705:./libraries/src/stm32f10x_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 706:./libraries/src/stm32f10x_can.c ****   }
 707:./libraries/src/stm32f10x_can.c ****   /* Release FIFO1 */
 708:./libraries/src/stm32f10x_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 709:./libraries/src/stm32f10x_can.c ****   {
 710:./libraries/src/stm32f10x_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 711:./libraries/src/stm32f10x_can.c ****   }
 712:./libraries/src/stm32f10x_can.c **** }
 713:./libraries/src/stm32f10x_can.c **** 
 714:./libraries/src/stm32f10x_can.c **** /**
 715:./libraries/src/stm32f10x_can.c ****   * @brief  Releases the specified FIFO.
 716:./libraries/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral. 
ARM GAS  /tmp/cc1CGZq2.s 			page 14


 717:./libraries/src/stm32f10x_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 718:./libraries/src/stm32f10x_can.c ****   * @retval None.
 719:./libraries/src/stm32f10x_can.c ****   */
 720:./libraries/src/stm32f10x_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 721:./libraries/src/stm32f10x_can.c **** {
 722:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 723:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 724:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 725:./libraries/src/stm32f10x_can.c ****   /* Release FIFO0 */
 726:./libraries/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 727:./libraries/src/stm32f10x_can.c ****   {
 728:./libraries/src/stm32f10x_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 729:./libraries/src/stm32f10x_can.c ****   }
 730:./libraries/src/stm32f10x_can.c ****   /* Release FIFO1 */
 731:./libraries/src/stm32f10x_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 732:./libraries/src/stm32f10x_can.c ****   {
 733:./libraries/src/stm32f10x_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 734:./libraries/src/stm32f10x_can.c ****   }
 735:./libraries/src/stm32f10x_can.c **** }
 736:./libraries/src/stm32f10x_can.c **** 
 737:./libraries/src/stm32f10x_can.c **** /**
 738:./libraries/src/stm32f10x_can.c ****   * @brief  Returns the number of pending messages.
 739:./libraries/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral.
 740:./libraries/src/stm32f10x_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 741:./libraries/src/stm32f10x_can.c ****   * @retval NbMessage : which is the number of pending message.
 742:./libraries/src/stm32f10x_can.c ****   */
 743:./libraries/src/stm32f10x_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 744:./libraries/src/stm32f10x_can.c **** {
 745:./libraries/src/stm32f10x_can.c ****   uint8_t message_pending=0;
 746:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 747:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 748:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 749:./libraries/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 750:./libraries/src/stm32f10x_can.c ****   {
 751:./libraries/src/stm32f10x_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 752:./libraries/src/stm32f10x_can.c ****   }
 753:./libraries/src/stm32f10x_can.c ****   else if (FIFONumber == CAN_FIFO1)
 754:./libraries/src/stm32f10x_can.c ****   {
 755:./libraries/src/stm32f10x_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 756:./libraries/src/stm32f10x_can.c ****   }
 757:./libraries/src/stm32f10x_can.c ****   else
 758:./libraries/src/stm32f10x_can.c ****   {
 759:./libraries/src/stm32f10x_can.c ****     message_pending = 0;
 760:./libraries/src/stm32f10x_can.c ****   }
 761:./libraries/src/stm32f10x_can.c ****   return message_pending;
 762:./libraries/src/stm32f10x_can.c **** }
 763:./libraries/src/stm32f10x_can.c **** 
 764:./libraries/src/stm32f10x_can.c **** 
 765:./libraries/src/stm32f10x_can.c **** /**
 766:./libraries/src/stm32f10x_can.c ****   * @brief   Select the CAN Operation mode.
 767:./libraries/src/stm32f10x_can.c ****   * @param CAN_OperatingMode : CAN Operating Mode. This parameter can be one 
 768:./libraries/src/stm32f10x_can.c ****   *                            of @ref CAN_OperatingMode_TypeDef enumeration.
 769:./libraries/src/stm32f10x_can.c ****   * @retval status of the requested mode which can be 
 770:./libraries/src/stm32f10x_can.c ****   *         - CAN_ModeStatus_Failed    CAN failed entering the specific mode 
 771:./libraries/src/stm32f10x_can.c ****   *         - CAN_ModeStatus_Success   CAN Succeed entering the specific mode 
 772:./libraries/src/stm32f10x_can.c **** 
 773:./libraries/src/stm32f10x_can.c ****   */
ARM GAS  /tmp/cc1CGZq2.s 			page 15


 774:./libraries/src/stm32f10x_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 775:./libraries/src/stm32f10x_can.c **** {
 776:./libraries/src/stm32f10x_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 777:./libraries/src/stm32f10x_can.c ****   
 778:./libraries/src/stm32f10x_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 779:./libraries/src/stm32f10x_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 780:./libraries/src/stm32f10x_can.c **** 
 781:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 782:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 783:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 784:./libraries/src/stm32f10x_can.c **** 
 785:./libraries/src/stm32f10x_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 786:./libraries/src/stm32f10x_can.c ****   {
 787:./libraries/src/stm32f10x_can.c ****     /* Request initialisation */
 788:./libraries/src/stm32f10x_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 789:./libraries/src/stm32f10x_can.c **** 
 790:./libraries/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 791:./libraries/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 792:./libraries/src/stm32f10x_can.c ****     {
 793:./libraries/src/stm32f10x_can.c ****       timeout--;
 794:./libraries/src/stm32f10x_can.c ****     }
 795:./libraries/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 796:./libraries/src/stm32f10x_can.c ****     {
 797:./libraries/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 798:./libraries/src/stm32f10x_can.c ****     }
 799:./libraries/src/stm32f10x_can.c ****     else
 800:./libraries/src/stm32f10x_can.c ****     {
 801:./libraries/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 802:./libraries/src/stm32f10x_can.c ****     }
 803:./libraries/src/stm32f10x_can.c ****   }
 804:./libraries/src/stm32f10x_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 805:./libraries/src/stm32f10x_can.c ****   {
 806:./libraries/src/stm32f10x_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 807:./libraries/src/stm32f10x_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 808:./libraries/src/stm32f10x_can.c **** 
 809:./libraries/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 810:./libraries/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 811:./libraries/src/stm32f10x_can.c ****     {
 812:./libraries/src/stm32f10x_can.c ****       timeout--;
 813:./libraries/src/stm32f10x_can.c ****     }
 814:./libraries/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 815:./libraries/src/stm32f10x_can.c ****     {
 816:./libraries/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 817:./libraries/src/stm32f10x_can.c ****     }
 818:./libraries/src/stm32f10x_can.c ****     else
 819:./libraries/src/stm32f10x_can.c ****     {
 820:./libraries/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 821:./libraries/src/stm32f10x_can.c ****     }
 822:./libraries/src/stm32f10x_can.c ****   }
 823:./libraries/src/stm32f10x_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 824:./libraries/src/stm32f10x_can.c ****   {
 825:./libraries/src/stm32f10x_can.c ****     /* Request Sleep mode */
 826:./libraries/src/stm32f10x_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 827:./libraries/src/stm32f10x_can.c **** 
 828:./libraries/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 829:./libraries/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 830:./libraries/src/stm32f10x_can.c ****     {
ARM GAS  /tmp/cc1CGZq2.s 			page 16


 831:./libraries/src/stm32f10x_can.c ****       timeout--;
 832:./libraries/src/stm32f10x_can.c ****     }
 833:./libraries/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 834:./libraries/src/stm32f10x_can.c ****     {
 835:./libraries/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 836:./libraries/src/stm32f10x_can.c ****     }
 837:./libraries/src/stm32f10x_can.c ****     else
 838:./libraries/src/stm32f10x_can.c ****     {
 839:./libraries/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 840:./libraries/src/stm32f10x_can.c ****     }
 841:./libraries/src/stm32f10x_can.c ****   }
 842:./libraries/src/stm32f10x_can.c ****   else
 843:./libraries/src/stm32f10x_can.c ****   {
 844:./libraries/src/stm32f10x_can.c ****     status = CAN_ModeStatus_Failed;
 845:./libraries/src/stm32f10x_can.c ****   }
 846:./libraries/src/stm32f10x_can.c **** 
 847:./libraries/src/stm32f10x_can.c ****   return  (uint8_t) status;
 848:./libraries/src/stm32f10x_can.c **** }
 849:./libraries/src/stm32f10x_can.c **** 
 850:./libraries/src/stm32f10x_can.c **** /**
 851:./libraries/src/stm32f10x_can.c ****   * @brief  Enters the low power mode.
 852:./libraries/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.
 853:./libraries/src/stm32f10x_can.c ****   * @retval status: CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed in an 
 854:./libraries/src/stm32f10x_can.c ****   *                 other case.
 855:./libraries/src/stm32f10x_can.c ****   */
 856:./libraries/src/stm32f10x_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 857:./libraries/src/stm32f10x_can.c **** {
 858:./libraries/src/stm32f10x_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 859:./libraries/src/stm32f10x_can.c ****   
 860:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 861:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 862:./libraries/src/stm32f10x_can.c ****     
 863:./libraries/src/stm32f10x_can.c ****   /* Request Sleep mode */
 864:./libraries/src/stm32f10x_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 865:./libraries/src/stm32f10x_can.c ****    
 866:./libraries/src/stm32f10x_can.c ****   /* Sleep mode status */
 867:./libraries/src/stm32f10x_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 868:./libraries/src/stm32f10x_can.c ****   {
 869:./libraries/src/stm32f10x_can.c ****     /* Sleep mode not entered */
 870:./libraries/src/stm32f10x_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 871:./libraries/src/stm32f10x_can.c ****   }
 872:./libraries/src/stm32f10x_can.c ****   /* return sleep mode status */
 873:./libraries/src/stm32f10x_can.c ****    return (uint8_t)sleepstatus;
 874:./libraries/src/stm32f10x_can.c **** }
 875:./libraries/src/stm32f10x_can.c **** 
 876:./libraries/src/stm32f10x_can.c **** /**
 877:./libraries/src/stm32f10x_can.c ****   * @brief  Wakes the CAN up.
 878:./libraries/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
 879:./libraries/src/stm32f10x_can.c ****   * @retval status:  CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed in an 
 880:./libraries/src/stm32f10x_can.c ****   *                  other case.
 881:./libraries/src/stm32f10x_can.c ****   */
 882:./libraries/src/stm32f10x_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 883:./libraries/src/stm32f10x_can.c **** {
 884:./libraries/src/stm32f10x_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 885:./libraries/src/stm32f10x_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 886:./libraries/src/stm32f10x_can.c ****   
 887:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
ARM GAS  /tmp/cc1CGZq2.s 			page 17


 888:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 889:./libraries/src/stm32f10x_can.c ****     
 890:./libraries/src/stm32f10x_can.c ****   /* Wake up request */
 891:./libraries/src/stm32f10x_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 892:./libraries/src/stm32f10x_can.c ****     
 893:./libraries/src/stm32f10x_can.c ****   /* Sleep mode status */
 894:./libraries/src/stm32f10x_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 895:./libraries/src/stm32f10x_can.c ****   {
 896:./libraries/src/stm32f10x_can.c ****    wait_slak--;
 897:./libraries/src/stm32f10x_can.c ****   }
 898:./libraries/src/stm32f10x_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 899:./libraries/src/stm32f10x_can.c ****   {
 900:./libraries/src/stm32f10x_can.c ****    /* wake up done : Sleep mode exited */
 901:./libraries/src/stm32f10x_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 902:./libraries/src/stm32f10x_can.c ****   }
 903:./libraries/src/stm32f10x_can.c ****   /* return wakeup status */
 904:./libraries/src/stm32f10x_can.c ****   return (uint8_t)wakeupstatus;
 905:./libraries/src/stm32f10x_can.c **** }
 906:./libraries/src/stm32f10x_can.c **** 
 907:./libraries/src/stm32f10x_can.c **** 
 908:./libraries/src/stm32f10x_can.c **** /**
 909:./libraries/src/stm32f10x_can.c ****   * @brief  Returns the CANx's last error code (LEC).
 910:./libraries/src/stm32f10x_can.c ****   * @param  CANx:          where x can be 1 or 2 to to select the CAN peripheral.  
 911:./libraries/src/stm32f10x_can.c ****   * @retval CAN_ErrorCode: specifies the Error code : 
 912:./libraries/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_NoErr            No Error  
 913:./libraries/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_StuffErr         Stuff Error
 914:./libraries/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_FormErr          Form Error
 915:./libraries/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_ACKErr           Acknowledgment Error
 916:./libraries/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_BitRecessiveErr  Bit Recessive Error
 917:./libraries/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_BitDominantErr   Bit Dominant Error
 918:./libraries/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_CRCErr           CRC Error
 919:./libraries/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_SoftwareSetErr   Software Set Error  
 920:./libraries/src/stm32f10x_can.c ****   */
 921:./libraries/src/stm32f10x_can.c ****  
 922:./libraries/src/stm32f10x_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
 923:./libraries/src/stm32f10x_can.c **** {
 924:./libraries/src/stm32f10x_can.c ****   uint8_t errorcode=0;
 925:./libraries/src/stm32f10x_can.c ****   
 926:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 927:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 928:./libraries/src/stm32f10x_can.c ****   
 929:./libraries/src/stm32f10x_can.c ****   /* Get the error code*/
 930:./libraries/src/stm32f10x_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 931:./libraries/src/stm32f10x_can.c ****   
 932:./libraries/src/stm32f10x_can.c ****   /* Return the error code*/
 933:./libraries/src/stm32f10x_can.c ****   return errorcode;
 934:./libraries/src/stm32f10x_can.c **** }
 935:./libraries/src/stm32f10x_can.c **** /**
 936:./libraries/src/stm32f10x_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
 937:./libraries/src/stm32f10x_can.c ****   * @note   In case of an error during reception, this counter is incremented 
 938:./libraries/src/stm32f10x_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
 939:./libraries/src/stm32f10x_can.c ****   *         standard. After every successful reception, the counter is 
 940:./libraries/src/stm32f10x_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
 941:./libraries/src/stm32f10x_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
 942:./libraries/src/stm32f10x_can.c ****   *         error passive state.  
 943:./libraries/src/stm32f10x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
 944:./libraries/src/stm32f10x_can.c ****   * @retval CAN Receive Error Counter. 
ARM GAS  /tmp/cc1CGZq2.s 			page 18


 945:./libraries/src/stm32f10x_can.c ****   */
 946:./libraries/src/stm32f10x_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
 947:./libraries/src/stm32f10x_can.c **** {
 948:./libraries/src/stm32f10x_can.c ****   uint8_t counter=0;
 949:./libraries/src/stm32f10x_can.c ****   
 950:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 951:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 952:./libraries/src/stm32f10x_can.c ****   
 953:./libraries/src/stm32f10x_can.c ****   /* Get the Receive Error Counter*/
 954:./libraries/src/stm32f10x_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 955:./libraries/src/stm32f10x_can.c ****   
 956:./libraries/src/stm32f10x_can.c ****   /* Return the Receive Error Counter*/
 957:./libraries/src/stm32f10x_can.c ****   return counter;
 958:./libraries/src/stm32f10x_can.c **** }
 959:./libraries/src/stm32f10x_can.c **** 
 960:./libraries/src/stm32f10x_can.c **** 
 961:./libraries/src/stm32f10x_can.c **** /**
 962:./libraries/src/stm32f10x_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
 963:./libraries/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.  
 964:./libraries/src/stm32f10x_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
 965:./libraries/src/stm32f10x_can.c ****   */
 966:./libraries/src/stm32f10x_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
 967:./libraries/src/stm32f10x_can.c **** {
 968:./libraries/src/stm32f10x_can.c ****   uint8_t counter=0;
 969:./libraries/src/stm32f10x_can.c ****   
 970:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 971:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 972:./libraries/src/stm32f10x_can.c ****   
 973:./libraries/src/stm32f10x_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
 974:./libraries/src/stm32f10x_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 975:./libraries/src/stm32f10x_can.c ****   
 976:./libraries/src/stm32f10x_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
 977:./libraries/src/stm32f10x_can.c ****   return counter;
 978:./libraries/src/stm32f10x_can.c **** }
 979:./libraries/src/stm32f10x_can.c **** 
 980:./libraries/src/stm32f10x_can.c **** 
 981:./libraries/src/stm32f10x_can.c **** /**
 982:./libraries/src/stm32f10x_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
 983:./libraries/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.
 984:./libraries/src/stm32f10x_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
 985:./libraries/src/stm32f10x_can.c ****   *                 This parameter can be: 
 986:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_TME, 
 987:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_FMP0, 
 988:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_FF0,
 989:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_FOV0, 
 990:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_FMP1, 
 991:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_FF1,
 992:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_FOV1, 
 993:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_EWG, 
 994:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_EPV,
 995:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_LEC, 
 996:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_ERR, 
 997:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_WKU or 
 998:./libraries/src/stm32f10x_can.c ****   *                 - CAN_IT_SLK.
 999:./libraries/src/stm32f10x_can.c ****   * @param  NewState: new state of the CAN interrupts.
1000:./libraries/src/stm32f10x_can.c ****   *                   This parameter can be: ENABLE or DISABLE.
1001:./libraries/src/stm32f10x_can.c ****   * @retval None.
ARM GAS  /tmp/cc1CGZq2.s 			page 19


1002:./libraries/src/stm32f10x_can.c ****   */
1003:./libraries/src/stm32f10x_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1004:./libraries/src/stm32f10x_can.c **** {
1005:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
1006:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1007:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1008:./libraries/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1009:./libraries/src/stm32f10x_can.c **** 
1010:./libraries/src/stm32f10x_can.c ****   if (NewState != DISABLE)
1011:./libraries/src/stm32f10x_can.c ****   {
1012:./libraries/src/stm32f10x_can.c ****     /* Enable the selected CANx interrupt */
1013:./libraries/src/stm32f10x_can.c ****     CANx->IER |= CAN_IT;
1014:./libraries/src/stm32f10x_can.c ****   }
1015:./libraries/src/stm32f10x_can.c ****   else
1016:./libraries/src/stm32f10x_can.c ****   {
1017:./libraries/src/stm32f10x_can.c ****     /* Disable the selected CANx interrupt */
1018:./libraries/src/stm32f10x_can.c ****     CANx->IER &= ~CAN_IT;
1019:./libraries/src/stm32f10x_can.c ****   }
1020:./libraries/src/stm32f10x_can.c **** }
1021:./libraries/src/stm32f10x_can.c **** /**
1022:./libraries/src/stm32f10x_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1023:./libraries/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
1024:./libraries/src/stm32f10x_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1025:./libraries/src/stm32f10x_can.c ****   *                   This parameter can be one of the following flags: 
1026:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_EWG
1027:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_EPV 
1028:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_BOF
1029:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP0
1030:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP1
1031:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP2
1032:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FMP1   
1033:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FF1       
1034:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FOV1   
1035:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FMP0   
1036:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FF0       
1037:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FOV0   
1038:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_WKU 
1039:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_SLAK  
1040:./libraries/src/stm32f10x_can.c ****   *                  - CAN_FLAG_LEC       
1041:./libraries/src/stm32f10x_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1042:./libraries/src/stm32f10x_can.c ****   */
1043:./libraries/src/stm32f10x_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1044:./libraries/src/stm32f10x_can.c **** {
1045:./libraries/src/stm32f10x_can.c ****   FlagStatus bitstatus = RESET;
1046:./libraries/src/stm32f10x_can.c ****   
1047:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
1048:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1049:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1050:./libraries/src/stm32f10x_can.c ****   
1051:./libraries/src/stm32f10x_can.c **** 
1052:./libraries/src/stm32f10x_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1053:./libraries/src/stm32f10x_can.c ****   { 
1054:./libraries/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1055:./libraries/src/stm32f10x_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1056:./libraries/src/stm32f10x_can.c ****     { 
1057:./libraries/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1058:./libraries/src/stm32f10x_can.c ****       bitstatus = SET;
ARM GAS  /tmp/cc1CGZq2.s 			page 20


1059:./libraries/src/stm32f10x_can.c ****     }
1060:./libraries/src/stm32f10x_can.c ****     else
1061:./libraries/src/stm32f10x_can.c ****     { 
1062:./libraries/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1063:./libraries/src/stm32f10x_can.c ****       bitstatus = RESET;
1064:./libraries/src/stm32f10x_can.c ****     }
1065:./libraries/src/stm32f10x_can.c ****   }
1066:./libraries/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1067:./libraries/src/stm32f10x_can.c ****   { 
1068:./libraries/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1069:./libraries/src/stm32f10x_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1070:./libraries/src/stm32f10x_can.c ****     { 
1071:./libraries/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1072:./libraries/src/stm32f10x_can.c ****       bitstatus = SET;
1073:./libraries/src/stm32f10x_can.c ****     }
1074:./libraries/src/stm32f10x_can.c ****     else
1075:./libraries/src/stm32f10x_can.c ****     { 
1076:./libraries/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1077:./libraries/src/stm32f10x_can.c ****       bitstatus = RESET;
1078:./libraries/src/stm32f10x_can.c ****     }
1079:./libraries/src/stm32f10x_can.c ****   }
1080:./libraries/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1081:./libraries/src/stm32f10x_can.c ****   { 
1082:./libraries/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1083:./libraries/src/stm32f10x_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1084:./libraries/src/stm32f10x_can.c ****     { 
1085:./libraries/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1086:./libraries/src/stm32f10x_can.c ****       bitstatus = SET;
1087:./libraries/src/stm32f10x_can.c ****     }
1088:./libraries/src/stm32f10x_can.c ****     else
1089:./libraries/src/stm32f10x_can.c ****     { 
1090:./libraries/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1091:./libraries/src/stm32f10x_can.c ****       bitstatus = RESET;
1092:./libraries/src/stm32f10x_can.c ****     }
1093:./libraries/src/stm32f10x_can.c ****   }
1094:./libraries/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1095:./libraries/src/stm32f10x_can.c ****   { 
1096:./libraries/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1097:./libraries/src/stm32f10x_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1098:./libraries/src/stm32f10x_can.c ****     { 
1099:./libraries/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1100:./libraries/src/stm32f10x_can.c ****       bitstatus = SET;
1101:./libraries/src/stm32f10x_can.c ****     }
1102:./libraries/src/stm32f10x_can.c ****     else
1103:./libraries/src/stm32f10x_can.c ****     { 
1104:./libraries/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1105:./libraries/src/stm32f10x_can.c ****       bitstatus = RESET;
1106:./libraries/src/stm32f10x_can.c ****     }
1107:./libraries/src/stm32f10x_can.c ****   }
1108:./libraries/src/stm32f10x_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1109:./libraries/src/stm32f10x_can.c ****   { 
1110:./libraries/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1111:./libraries/src/stm32f10x_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1112:./libraries/src/stm32f10x_can.c ****     { 
1113:./libraries/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1114:./libraries/src/stm32f10x_can.c ****       bitstatus = SET;
1115:./libraries/src/stm32f10x_can.c ****     }
ARM GAS  /tmp/cc1CGZq2.s 			page 21


1116:./libraries/src/stm32f10x_can.c ****     else
1117:./libraries/src/stm32f10x_can.c ****     { 
1118:./libraries/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1119:./libraries/src/stm32f10x_can.c ****       bitstatus = RESET;
1120:./libraries/src/stm32f10x_can.c ****     }
1121:./libraries/src/stm32f10x_can.c ****   }
1122:./libraries/src/stm32f10x_can.c ****   /* Return the CAN_FLAG status */
1123:./libraries/src/stm32f10x_can.c ****   return  bitstatus;
1124:./libraries/src/stm32f10x_can.c **** }
1125:./libraries/src/stm32f10x_can.c **** 
1126:./libraries/src/stm32f10x_can.c **** /**
1127:./libraries/src/stm32f10x_can.c ****   * @brief  Clears the CAN's pending flags.
1128:./libraries/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
1129:./libraries/src/stm32f10x_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1130:./libraries/src/stm32f10x_can.c ****   *                   This parameter can be one of the following flags: 
1131:./libraries/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP0
1132:./libraries/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP1
1133:./libraries/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP2
1134:./libraries/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FF1       
1135:./libraries/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FOV1   
1136:./libraries/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FF0       
1137:./libraries/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FOV0   
1138:./libraries/src/stm32f10x_can.c ****   *                    - CAN_FLAG_WKU   
1139:./libraries/src/stm32f10x_can.c ****   *                    - CAN_FLAG_SLAK    
1140:./libraries/src/stm32f10x_can.c ****   *                    - CAN_FLAG_LEC       
1141:./libraries/src/stm32f10x_can.c ****   * @retval None.
1142:./libraries/src/stm32f10x_can.c ****   */
1143:./libraries/src/stm32f10x_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1144:./libraries/src/stm32f10x_can.c **** {
1145:./libraries/src/stm32f10x_can.c ****   uint32_t flagtmp=0;
1146:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
1147:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1148:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1149:./libraries/src/stm32f10x_can.c ****   
1150:./libraries/src/stm32f10x_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1151:./libraries/src/stm32f10x_can.c ****   {
1152:./libraries/src/stm32f10x_can.c ****     /* Clear the selected CAN flags */
1153:./libraries/src/stm32f10x_can.c ****     CANx->ESR = (uint32_t)RESET;
1154:./libraries/src/stm32f10x_can.c ****   }
1155:./libraries/src/stm32f10x_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1156:./libraries/src/stm32f10x_can.c ****   {
1157:./libraries/src/stm32f10x_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1158:./libraries/src/stm32f10x_can.c **** 
1159:./libraries/src/stm32f10x_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1160:./libraries/src/stm32f10x_can.c ****     {
1161:./libraries/src/stm32f10x_can.c ****       /* Receive Flags */
1162:./libraries/src/stm32f10x_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1163:./libraries/src/stm32f10x_can.c ****     }
1164:./libraries/src/stm32f10x_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1165:./libraries/src/stm32f10x_can.c ****     {
1166:./libraries/src/stm32f10x_can.c ****       /* Receive Flags */
1167:./libraries/src/stm32f10x_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1168:./libraries/src/stm32f10x_can.c ****     }
1169:./libraries/src/stm32f10x_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1170:./libraries/src/stm32f10x_can.c ****     {
1171:./libraries/src/stm32f10x_can.c ****       /* Transmit Flags */
1172:./libraries/src/stm32f10x_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
ARM GAS  /tmp/cc1CGZq2.s 			page 22


1173:./libraries/src/stm32f10x_can.c ****     }
1174:./libraries/src/stm32f10x_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1175:./libraries/src/stm32f10x_can.c ****     {
1176:./libraries/src/stm32f10x_can.c ****       /* Operating mode Flags */
1177:./libraries/src/stm32f10x_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1178:./libraries/src/stm32f10x_can.c ****     }
1179:./libraries/src/stm32f10x_can.c ****   }
1180:./libraries/src/stm32f10x_can.c **** }
1181:./libraries/src/stm32f10x_can.c **** 
1182:./libraries/src/stm32f10x_can.c **** /**
1183:./libraries/src/stm32f10x_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1184:./libraries/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
1185:./libraries/src/stm32f10x_can.c ****   * @param  CAN_IT:  specifies the CAN interrupt source to check.
1186:./libraries/src/stm32f10x_can.c ****   *                  This parameter can be one of the following flags: 
1187:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_TME               
1188:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_FMP0              
1189:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_FF0               
1190:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_FOV0              
1191:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_FMP1              
1192:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_FF1               
1193:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_FOV1              
1194:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_WKU  
1195:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_SLK  
1196:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_EWG    
1197:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_EPV    
1198:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_BOF    
1199:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_LEC    
1200:./libraries/src/stm32f10x_can.c ****   *                 -  CAN_IT_ERR 
1201:./libraries/src/stm32f10x_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1202:./libraries/src/stm32f10x_can.c ****   */
1203:./libraries/src/stm32f10x_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1204:./libraries/src/stm32f10x_can.c **** {
1205:./libraries/src/stm32f10x_can.c ****   ITStatus itstatus = RESET;
1206:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
1207:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1208:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1209:./libraries/src/stm32f10x_can.c ****   
1210:./libraries/src/stm32f10x_can.c ****   /* check the enable interrupt bit */
1211:./libraries/src/stm32f10x_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1212:./libraries/src/stm32f10x_can.c ****  {
1213:./libraries/src/stm32f10x_can.c ****    /* in case the Interrupt is enabled, .... */
1214:./libraries/src/stm32f10x_can.c ****     switch (CAN_IT)
1215:./libraries/src/stm32f10x_can.c ****     {
1216:./libraries/src/stm32f10x_can.c ****       case CAN_IT_TME:
1217:./libraries/src/stm32f10x_can.c ****                /* Check CAN_TSR_RQCPx bits */
1218:./libraries/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1219:./libraries/src/stm32f10x_can.c **** 	      break;
1220:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FMP0:
1221:./libraries/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FMP0 bit */
1222:./libraries/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1223:./libraries/src/stm32f10x_can.c **** 	      break;
1224:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FF0:
1225:./libraries/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FULL0 bit */
1226:./libraries/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1227:./libraries/src/stm32f10x_can.c **** 	      break;
1228:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
1229:./libraries/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FOVR0 bit */
ARM GAS  /tmp/cc1CGZq2.s 			page 23


1230:./libraries/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1231:./libraries/src/stm32f10x_can.c **** 	      break;
1232:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FMP1:
1233:./libraries/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FMP1 bit */
1234:./libraries/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1235:./libraries/src/stm32f10x_can.c **** 	      break;
1236:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FF1:
1237:./libraries/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FULL1 bit */
1238:./libraries/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1239:./libraries/src/stm32f10x_can.c **** 	      break;
1240:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
1241:./libraries/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FOVR1 bit */
1242:./libraries/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1243:./libraries/src/stm32f10x_can.c **** 	      break;
1244:./libraries/src/stm32f10x_can.c ****       case CAN_IT_WKU:
1245:./libraries/src/stm32f10x_can.c ****                /* Check CAN_MSR_WKUI bit */
1246:./libraries/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1247:./libraries/src/stm32f10x_can.c **** 	      break;
1248:./libraries/src/stm32f10x_can.c ****       case CAN_IT_SLK:
1249:./libraries/src/stm32f10x_can.c ****                /* Check CAN_MSR_SLAKI bit */
1250:./libraries/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1251:./libraries/src/stm32f10x_can.c **** 	      break;
1252:./libraries/src/stm32f10x_can.c ****       case CAN_IT_EWG:
1253:./libraries/src/stm32f10x_can.c ****                /* Check CAN_ESR_EWGF bit */
1254:./libraries/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1255:./libraries/src/stm32f10x_can.c **** 	      break;
1256:./libraries/src/stm32f10x_can.c ****       case CAN_IT_EPV:
1257:./libraries/src/stm32f10x_can.c ****                /* Check CAN_ESR_EPVF bit */
1258:./libraries/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1259:./libraries/src/stm32f10x_can.c **** 	      break;
1260:./libraries/src/stm32f10x_can.c ****       case CAN_IT_BOF:
1261:./libraries/src/stm32f10x_can.c ****                /* Check CAN_ESR_BOFF bit */
1262:./libraries/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1263:./libraries/src/stm32f10x_can.c **** 	      break;
1264:./libraries/src/stm32f10x_can.c ****       case CAN_IT_LEC:
1265:./libraries/src/stm32f10x_can.c ****                /* Check CAN_ESR_LEC bit */
1266:./libraries/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1267:./libraries/src/stm32f10x_can.c **** 	      break;
1268:./libraries/src/stm32f10x_can.c ****       case CAN_IT_ERR:
1269:./libraries/src/stm32f10x_can.c ****                /* Check CAN_MSR_ERRI bit */ 
1270:./libraries/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1271:./libraries/src/stm32f10x_can.c **** 	      break;
1272:./libraries/src/stm32f10x_can.c ****       default :
1273:./libraries/src/stm32f10x_can.c ****                /* in case of error, return RESET */
1274:./libraries/src/stm32f10x_can.c ****               itstatus = RESET;
1275:./libraries/src/stm32f10x_can.c ****               break;
1276:./libraries/src/stm32f10x_can.c ****     }
1277:./libraries/src/stm32f10x_can.c ****   }
1278:./libraries/src/stm32f10x_can.c ****   else
1279:./libraries/src/stm32f10x_can.c ****   {
1280:./libraries/src/stm32f10x_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1281:./libraries/src/stm32f10x_can.c ****     itstatus  = RESET;
1282:./libraries/src/stm32f10x_can.c ****   }
1283:./libraries/src/stm32f10x_can.c ****   
1284:./libraries/src/stm32f10x_can.c ****   /* Return the CAN_IT status */
1285:./libraries/src/stm32f10x_can.c ****   return  itstatus;
1286:./libraries/src/stm32f10x_can.c **** }
ARM GAS  /tmp/cc1CGZq2.s 			page 24


1287:./libraries/src/stm32f10x_can.c **** 
1288:./libraries/src/stm32f10x_can.c **** /**
1289:./libraries/src/stm32f10x_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1290:./libraries/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
1291:./libraries/src/stm32f10x_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1292:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_TME                     
1293:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_FF0               
1294:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_FOV0                     
1295:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_FF1               
1296:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_FOV1              
1297:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_WKU  
1298:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_SLK  
1299:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_EWG    
1300:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_EPV    
1301:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_BOF    
1302:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_LEC    
1303:./libraries/src/stm32f10x_can.c ****   *                  -  CAN_IT_ERR 
1304:./libraries/src/stm32f10x_can.c ****   * @retval None.
1305:./libraries/src/stm32f10x_can.c ****   */
1306:./libraries/src/stm32f10x_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1307:./libraries/src/stm32f10x_can.c **** {
1308:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
1309:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1310:./libraries/src/stm32f10x_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1311:./libraries/src/stm32f10x_can.c **** 
1312:./libraries/src/stm32f10x_can.c ****   switch (CAN_IT)
1313:./libraries/src/stm32f10x_can.c ****   {
1314:./libraries/src/stm32f10x_can.c ****       case CAN_IT_TME:
1315:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_TSR_RQCPx (rc_w1)*/
1316:./libraries/src/stm32f10x_can.c **** 	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1317:./libraries/src/stm32f10x_can.c **** 	      break;
1318:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FF0:
1319:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1320:./libraries/src/stm32f10x_can.c **** 	      CANx->RF0R = CAN_RF0R_FULL0; 
1321:./libraries/src/stm32f10x_can.c **** 	      break;
1322:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
1323:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1324:./libraries/src/stm32f10x_can.c **** 	      CANx->RF0R = CAN_RF0R_FOVR0; 
1325:./libraries/src/stm32f10x_can.c **** 	      break;
1326:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FF1:
1327:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1328:./libraries/src/stm32f10x_can.c **** 	      CANx->RF1R = CAN_RF1R_FULL1;  
1329:./libraries/src/stm32f10x_can.c **** 	      break;
1330:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
1331:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1332:./libraries/src/stm32f10x_can.c **** 	      CANx->RF1R = CAN_RF1R_FOVR1; 
1333:./libraries/src/stm32f10x_can.c **** 	      break;
1334:./libraries/src/stm32f10x_can.c ****       case CAN_IT_WKU:
1335:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_MSR_WKUI (rc_w1)*/
1336:./libraries/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_WKUI;  
1337:./libraries/src/stm32f10x_can.c **** 	      break;
1338:./libraries/src/stm32f10x_can.c ****       case CAN_IT_SLK:
1339:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1340:./libraries/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_SLAKI;   
1341:./libraries/src/stm32f10x_can.c **** 	      break;
1342:./libraries/src/stm32f10x_can.c ****       case CAN_IT_EWG:
1343:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
ARM GAS  /tmp/cc1CGZq2.s 			page 25


1344:./libraries/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI;
1345:./libraries/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1346:./libraries/src/stm32f10x_can.c ****                         of the CAN Bus status*/ 
1347:./libraries/src/stm32f10x_can.c **** 	      break;
1348:./libraries/src/stm32f10x_can.c ****       case CAN_IT_EPV:
1349:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1350:./libraries/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1351:./libraries/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1352:./libraries/src/stm32f10x_can.c ****                         of the CAN Bus status*/
1353:./libraries/src/stm32f10x_can.c **** 	      break;
1354:./libraries/src/stm32f10x_can.c ****       case CAN_IT_BOF:
1355:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */ 
1356:./libraries/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1357:./libraries/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1358:./libraries/src/stm32f10x_can.c ****                         of the CAN Bus status*/
1359:./libraries/src/stm32f10x_can.c **** 	      break;
1360:./libraries/src/stm32f10x_can.c ****       case CAN_IT_LEC:
1361:./libraries/src/stm32f10x_can.c ****               /*  Clear LEC bits */
1362:./libraries/src/stm32f10x_can.c **** 	      CANx->ESR = RESET; 
1363:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1364:./libraries/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1365:./libraries/src/stm32f10x_can.c **** 	      break;
1366:./libraries/src/stm32f10x_can.c ****       case CAN_IT_ERR:
1367:./libraries/src/stm32f10x_can.c ****               /*Clear LEC bits */
1368:./libraries/src/stm32f10x_can.c **** 	      CANx->ESR = RESET; 
1369:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1370:./libraries/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1371:./libraries/src/stm32f10x_can.c **** 	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
1372:./libraries/src/stm32f10x_can.c ****                   of the CAN Bus status*/
1373:./libraries/src/stm32f10x_can.c **** 	      break;
1374:./libraries/src/stm32f10x_can.c ****       default :
1375:./libraries/src/stm32f10x_can.c **** 	      break;
1376:./libraries/src/stm32f10x_can.c ****    }
1377:./libraries/src/stm32f10x_can.c **** }
1378:./libraries/src/stm32f10x_can.c **** 
1379:./libraries/src/stm32f10x_can.c **** /**
1380:./libraries/src/stm32f10x_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1381:./libraries/src/stm32f10x_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1382:./libraries/src/stm32f10x_can.c ****   * @param  It_Bit:  specifies the interrupt source bit to check.
1383:./libraries/src/stm32f10x_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1384:./libraries/src/stm32f10x_can.c ****   */
1385:./libraries/src/stm32f10x_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1386:./libraries/src/stm32f10x_can.c **** {
  27              		.loc 1 1386 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1387:./libraries/src/stm32f10x_can.c ****   ITStatus pendingbitstatus = RESET;
1388:./libraries/src/stm32f10x_can.c ****   
1389:./libraries/src/stm32f10x_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  33              		.loc 1 1389 0
  34 0000 0842     		tst	r0, r1
  35 0002 01D0     		beq	.L3
1390:./libraries/src/stm32f10x_can.c ****   {
1391:./libraries/src/stm32f10x_can.c ****     /* CAN_IT is set */
ARM GAS  /tmp/cc1CGZq2.s 			page 26


1392:./libraries/src/stm32f10x_can.c ****     pendingbitstatus = SET;
  36              		.loc 1 1392 0
  37 0004 0120     		movs	r0, #1
  38              	.LVL1:
  39 0006 7047     		bx	lr
  40              	.LVL2:
  41              	.L3:
1393:./libraries/src/stm32f10x_can.c ****   }
1394:./libraries/src/stm32f10x_can.c ****   else
1395:./libraries/src/stm32f10x_can.c ****   {
1396:./libraries/src/stm32f10x_can.c ****     /* CAN_IT is reset */
1397:./libraries/src/stm32f10x_can.c ****     pendingbitstatus = RESET;
  42              		.loc 1 1397 0
  43 0008 0020     		movs	r0, #0
  44              	.LVL3:
1398:./libraries/src/stm32f10x_can.c ****   }
1399:./libraries/src/stm32f10x_can.c ****   return pendingbitstatus;
1400:./libraries/src/stm32f10x_can.c **** }
  45              		.loc 1 1400 0
  46 000a 7047     		bx	lr
  47              		.cfi_endproc
  48              	.LFE53:
  50              		.section	.text.CAN_DeInit,"ax",%progbits
  51              		.align	2
  52              		.global	CAN_DeInit
  53              		.thumb
  54              		.thumb_func
  56              	CAN_DeInit:
  57              	.LFB29:
 123:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
  58              		.loc 1 123 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              	.LVL4:
  63 0000 08B5     		push	{r3, lr}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 3, -8
  67              		.cfi_offset 14, -4
 127:./libraries/src/stm32f10x_can.c ****   {
  68              		.loc 1 127 0
  69 0002 0C4B     		ldr	r3, .L8
  70 0004 9842     		cmp	r0, r3
  71 0006 0AD1     		bne	.L5
 130:./libraries/src/stm32f10x_can.c ****     /* Release CAN1 from reset state */
  72              		.loc 1 130 0
  73 0008 0121     		movs	r1, #1
  74 000a 4FF00070 		mov	r0, #33554432
  75              	.LVL5:
  76 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  77              	.LVL6:
 132:./libraries/src/stm32f10x_can.c ****   }
  78              		.loc 1 132 0
  79 0012 0021     		movs	r1, #0
  80 0014 4FF00070 		mov	r0, #33554432
  81 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
ARM GAS  /tmp/cc1CGZq2.s 			page 27


  82              	.LVL7:
  83 001c 08BD     		pop	{r3, pc}
  84              	.LVL8:
  85              	.L5:
 137:./libraries/src/stm32f10x_can.c ****     /* Release CAN2 from reset state */
  86              		.loc 1 137 0
  87 001e 0121     		movs	r1, #1
  88 0020 4FF08060 		mov	r0, #67108864
  89              	.LVL9:
  90 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  91              	.LVL10:
 139:./libraries/src/stm32f10x_can.c ****   }
  92              		.loc 1 139 0
  93 0028 0021     		movs	r1, #0
  94 002a 4FF08060 		mov	r0, #67108864
  95 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  96              	.LVL11:
  97 0032 08BD     		pop	{r3, pc}
  98              	.L9:
  99              		.align	2
 100              	.L8:
 101 0034 00640040 		.word	1073767424
 102              		.cfi_endproc
 103              	.LFE29:
 105              		.section	.text.CAN_Init,"ax",%progbits
 106              		.align	2
 107              		.global	CAN_Init
 108              		.thumb
 109              		.thumb_func
 111              	CAN_Init:
 112              	.LFB30:
 155:./libraries/src/stm32f10x_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 113              		.loc 1 155 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.LVL12:
 173:./libraries/src/stm32f10x_can.c **** 
 119              		.loc 1 173 0
 120 0000 0368     		ldr	r3, [r0]
 121 0002 23F00203 		bic	r3, r3, #2
 122 0006 0360     		str	r3, [r0]
 176:./libraries/src/stm32f10x_can.c **** 
 123              		.loc 1 176 0
 124 0008 0368     		ldr	r3, [r0]
 125 000a 43F00103 		orr	r3, r3, #1
 126 000e 0360     		str	r3, [r0]
 157:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 127              		.loc 1 157 0
 128 0010 0023     		movs	r3, #0
 179:./libraries/src/stm32f10x_can.c ****   {
 129              		.loc 1 179 0
 130 0012 00E0     		b	.L11
 131              	.LVL13:
 132              	.L13:
 181:./libraries/src/stm32f10x_can.c ****   }
ARM GAS  /tmp/cc1CGZq2.s 			page 28


 133              		.loc 1 181 0
 134 0014 0133     		adds	r3, r3, #1
 135              	.LVL14:
 136              	.L11:
 179:./libraries/src/stm32f10x_can.c ****   {
 137              		.loc 1 179 0
 138 0016 4268     		ldr	r2, [r0, #4]
 139 0018 12F0010F 		tst	r2, #1
 140 001c 03D1     		bne	.L12
 179:./libraries/src/stm32f10x_can.c ****   {
 141              		.loc 1 179 0 is_stmt 0 discriminator 1
 142 001e 4FF6FF72 		movw	r2, #65535
 143 0022 9342     		cmp	r3, r2
 144 0024 F6D1     		bne	.L13
 145              	.L12:
 185:./libraries/src/stm32f10x_can.c ****   {
 146              		.loc 1 185 0 is_stmt 1
 147 0026 4368     		ldr	r3, [r0, #4]
 148              	.LVL15:
 149 0028 13F0010F 		tst	r3, #1
 150 002c 6BD0     		beq	.L30
 192:./libraries/src/stm32f10x_can.c ****     {
 151              		.loc 1 192 0
 152 002e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 153 0030 012B     		cmp	r3, #1
 154 0032 04D1     		bne	.L15
 194:./libraries/src/stm32f10x_can.c ****     }
 155              		.loc 1 194 0
 156 0034 0368     		ldr	r3, [r0]
 157 0036 43F08003 		orr	r3, r3, #128
 158 003a 0360     		str	r3, [r0]
 159 003c 03E0     		b	.L16
 160              	.L15:
 198:./libraries/src/stm32f10x_can.c ****     }
 161              		.loc 1 198 0
 162 003e 0368     		ldr	r3, [r0]
 163 0040 23F08003 		bic	r3, r3, #128
 164 0044 0360     		str	r3, [r0]
 165              	.L16:
 202:./libraries/src/stm32f10x_can.c ****     {
 166              		.loc 1 202 0
 167 0046 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 168 0048 012B     		cmp	r3, #1
 169 004a 04D1     		bne	.L17
 204:./libraries/src/stm32f10x_can.c ****     }
 170              		.loc 1 204 0
 171 004c 0368     		ldr	r3, [r0]
 172 004e 43F04003 		orr	r3, r3, #64
 173 0052 0360     		str	r3, [r0]
 174 0054 03E0     		b	.L18
 175              	.L17:
 208:./libraries/src/stm32f10x_can.c ****     }
 176              		.loc 1 208 0
 177 0056 0368     		ldr	r3, [r0]
 178 0058 23F04003 		bic	r3, r3, #64
 179 005c 0360     		str	r3, [r0]
 180              	.L18:
ARM GAS  /tmp/cc1CGZq2.s 			page 29


 212:./libraries/src/stm32f10x_can.c ****     {
 181              		.loc 1 212 0
 182 005e 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 183 0060 012B     		cmp	r3, #1
 184 0062 04D1     		bne	.L19
 214:./libraries/src/stm32f10x_can.c ****     }
 185              		.loc 1 214 0
 186 0064 0368     		ldr	r3, [r0]
 187 0066 43F02003 		orr	r3, r3, #32
 188 006a 0360     		str	r3, [r0]
 189 006c 03E0     		b	.L20
 190              	.L19:
 218:./libraries/src/stm32f10x_can.c ****     }
 191              		.loc 1 218 0
 192 006e 0368     		ldr	r3, [r0]
 193 0070 23F02003 		bic	r3, r3, #32
 194 0074 0360     		str	r3, [r0]
 195              	.L20:
 222:./libraries/src/stm32f10x_can.c ****     {
 196              		.loc 1 222 0
 197 0076 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 198 0078 012B     		cmp	r3, #1
 199 007a 04D1     		bne	.L21
 224:./libraries/src/stm32f10x_can.c ****     }
 200              		.loc 1 224 0
 201 007c 0368     		ldr	r3, [r0]
 202 007e 43F01003 		orr	r3, r3, #16
 203 0082 0360     		str	r3, [r0]
 204 0084 03E0     		b	.L22
 205              	.L21:
 228:./libraries/src/stm32f10x_can.c ****     }
 206              		.loc 1 228 0
 207 0086 0368     		ldr	r3, [r0]
 208 0088 23F01003 		bic	r3, r3, #16
 209 008c 0360     		str	r3, [r0]
 210              	.L22:
 232:./libraries/src/stm32f10x_can.c ****     {
 211              		.loc 1 232 0
 212 008e 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 213 0090 012B     		cmp	r3, #1
 214 0092 04D1     		bne	.L23
 234:./libraries/src/stm32f10x_can.c ****     }
 215              		.loc 1 234 0
 216 0094 0368     		ldr	r3, [r0]
 217 0096 43F00803 		orr	r3, r3, #8
 218 009a 0360     		str	r3, [r0]
 219 009c 03E0     		b	.L24
 220              	.L23:
 238:./libraries/src/stm32f10x_can.c ****     }
 221              		.loc 1 238 0
 222 009e 0368     		ldr	r3, [r0]
 223 00a0 23F00803 		bic	r3, r3, #8
 224 00a4 0360     		str	r3, [r0]
 225              	.L24:
 242:./libraries/src/stm32f10x_can.c ****     {
 226              		.loc 1 242 0
 227 00a6 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
ARM GAS  /tmp/cc1CGZq2.s 			page 30


 228 00a8 012B     		cmp	r3, #1
 229 00aa 04D1     		bne	.L25
 244:./libraries/src/stm32f10x_can.c ****     }
 230              		.loc 1 244 0
 231 00ac 0368     		ldr	r3, [r0]
 232 00ae 43F00403 		orr	r3, r3, #4
 233 00b2 0360     		str	r3, [r0]
 234 00b4 03E0     		b	.L26
 235              	.L25:
 248:./libraries/src/stm32f10x_can.c ****     }
 236              		.loc 1 248 0
 237 00b6 0368     		ldr	r3, [r0]
 238 00b8 23F00403 		bic	r3, r3, #4
 239 00bc 0360     		str	r3, [r0]
 240              	.L26:
 252:./libraries/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 241              		.loc 1 252 0
 242 00be 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 253:./libraries/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 243              		.loc 1 253 0
 244 00c0 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 245 00c2 1B06     		lsls	r3, r3, #24
 252:./libraries/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 246              		.loc 1 252 0
 247 00c4 43EA8273 		orr	r3, r3, r2, lsl #30
 254:./libraries/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 248              		.loc 1 254 0
 249 00c8 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 253:./libraries/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 250              		.loc 1 253 0
 251 00ca 43EA0243 		orr	r3, r3, r2, lsl #16
 255:./libraries/src/stm32f10x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 252              		.loc 1 255 0
 253 00ce 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 254:./libraries/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 254              		.loc 1 254 0
 255 00d0 43EA0253 		orr	r3, r3, r2, lsl #20
 256:./libraries/src/stm32f10x_can.c **** 
 256              		.loc 1 256 0
 257 00d4 0A88     		ldrh	r2, [r1]
 258 00d6 013A     		subs	r2, r2, #1
 255:./libraries/src/stm32f10x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 259              		.loc 1 255 0
 260 00d8 1343     		orrs	r3, r3, r2
 252:./libraries/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 261              		.loc 1 252 0
 262 00da C361     		str	r3, [r0, #28]
 259:./libraries/src/stm32f10x_can.c **** 
 263              		.loc 1 259 0
 264 00dc 0368     		ldr	r3, [r0]
 265 00de 23F00103 		bic	r3, r3, #1
 266 00e2 0360     		str	r3, [r0]
 267              	.LVL16:
 262:./libraries/src/stm32f10x_can.c **** 
 268              		.loc 1 262 0
 269 00e4 0023     		movs	r3, #0
 264:./libraries/src/stm32f10x_can.c ****    {
ARM GAS  /tmp/cc1CGZq2.s 			page 31


 270              		.loc 1 264 0
 271 00e6 00E0     		b	.L27
 272              	.LVL17:
 273              	.L29:
 266:./libraries/src/stm32f10x_can.c ****    }
 274              		.loc 1 266 0
 275 00e8 0133     		adds	r3, r3, #1
 276              	.LVL18:
 277              	.L27:
 264:./libraries/src/stm32f10x_can.c ****    {
 278              		.loc 1 264 0
 279 00ea 4268     		ldr	r2, [r0, #4]
 280 00ec 12F0010F 		tst	r2, #1
 281 00f0 03D0     		beq	.L28
 264:./libraries/src/stm32f10x_can.c ****    {
 282              		.loc 1 264 0 is_stmt 0 discriminator 1
 283 00f2 4FF6FF72 		movw	r2, #65535
 284 00f6 9342     		cmp	r3, r2
 285 00f8 F6D1     		bne	.L29
 286              	.L28:
 270:./libraries/src/stm32f10x_can.c ****     {
 287              		.loc 1 270 0 is_stmt 1
 288 00fa 4368     		ldr	r3, [r0, #4]
 289              	.LVL19:
 290 00fc 13F0010F 		tst	r3, #1
 291 0100 03D0     		beq	.L31
 272:./libraries/src/stm32f10x_can.c ****     }
 292              		.loc 1 272 0
 293 0102 0020     		movs	r0, #0
 294              	.LVL20:
 295 0104 7047     		bx	lr
 296              	.LVL21:
 297              	.L30:
 187:./libraries/src/stm32f10x_can.c ****   }
 298              		.loc 1 187 0
 299 0106 0020     		movs	r0, #0
 300              	.LVL22:
 301 0108 7047     		bx	lr
 302              	.LVL23:
 303              	.L31:
 276:./libraries/src/stm32f10x_can.c ****     }
 304              		.loc 1 276 0
 305 010a 0120     		movs	r0, #1
 306              	.LVL24:
 282:./libraries/src/stm32f10x_can.c **** 
 307              		.loc 1 282 0
 308 010c 7047     		bx	lr
 309              		.cfi_endproc
 310              	.LFE30:
 312 010e 00BF     		.section	.text.CAN_FilterInit,"ax",%progbits
 313              		.align	2
 314              		.global	CAN_FilterInit
 315              		.thumb
 316              		.thumb_func
 318              	CAN_FilterInit:
 319              	.LFB31:
 293:./libraries/src/stm32f10x_can.c ****   uint32_t filter_number_bit_pos = 0;
ARM GAS  /tmp/cc1CGZq2.s 			page 32


 320              		.loc 1 293 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              		@ link register save eliminated.
 325              	.LVL25:
 326 0000 70B4     		push	{r4, r5, r6}
 327              	.LCFI1:
 328              		.cfi_def_cfa_offset 12
 329              		.cfi_offset 4, -12
 330              		.cfi_offset 5, -8
 331              		.cfi_offset 6, -4
 332              	.LVL26:
 302:./libraries/src/stm32f10x_can.c **** 
 333              		.loc 1 302 0
 334 0002 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 335 0004 0122     		movs	r2, #1
 336 0006 02FA03F3 		lsl	r3, r2, r3
 337              	.LVL27:
 305:./libraries/src/stm32f10x_can.c **** 
 338              		.loc 1 305 0
 339 000a 394A     		ldr	r2, .L41
 340 000c D2F80012 		ldr	r1, [r2, #512]
 341 0010 41F00101 		orr	r1, r1, #1
 342 0014 C2F80012 		str	r1, [r2, #512]
 308:./libraries/src/stm32f10x_can.c **** 
 343              		.loc 1 308 0
 344 0018 D2F81C12 		ldr	r1, [r2, #540]
 345 001c DC43     		mvns	r4, r3
 346 001e 2140     		ands	r1, r1, r4
 347 0020 C2F81C12 		str	r1, [r2, #540]
 311:./libraries/src/stm32f10x_can.c ****   {
 348              		.loc 1 311 0
 349 0024 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 350 0026 B2B9     		cbnz	r2, .L33
 314:./libraries/src/stm32f10x_can.c **** 
 351              		.loc 1 314 0
 352 0028 314A     		ldr	r2, .L41
 353 002a D2F80C12 		ldr	r1, [r2, #524]
 354 002e 2140     		ands	r1, r1, r4
 355 0030 C2F80C12 		str	r1, [r2, #524]
 318:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 356              		.loc 1 318 0
 357 0034 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 319:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 358              		.loc 1 319 0
 359 0036 C688     		ldrh	r6, [r0, #6]
 320:./libraries/src/stm32f10x_can.c **** 
 360              		.loc 1 320 0
 361 0038 4588     		ldrh	r5, [r0, #2]
 319:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 362              		.loc 1 319 0
 363 003a 45EA0645 		orr	r5, r5, r6, lsl #16
 318:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 364              		.loc 1 318 0
 365 003e 4831     		adds	r1, r1, #72
 366 0040 42F83150 		str	r5, [r2, r1, lsl #3]
ARM GAS  /tmp/cc1CGZq2.s 			page 33


 324:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 367              		.loc 1 324 0
 368 0044 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 325:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 369              		.loc 1 325 0
 370 0046 8688     		ldrh	r6, [r0, #4]
 326:./libraries/src/stm32f10x_can.c ****   }
 371              		.loc 1 326 0
 372 0048 0188     		ldrh	r1, [r0]
 325:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 373              		.loc 1 325 0
 374 004a 41EA0641 		orr	r1, r1, r6, lsl #16
 324:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 375              		.loc 1 324 0
 376 004e 4835     		adds	r5, r5, #72
 377 0050 02EBC502 		add	r2, r2, r5, lsl #3
 378 0054 5160     		str	r1, [r2, #4]
 379              	.L33:
 329:./libraries/src/stm32f10x_can.c ****   {
 380              		.loc 1 329 0
 381 0056 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 382 0058 012A     		cmp	r2, #1
 383 005a 16D1     		bne	.L34
 332:./libraries/src/stm32f10x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 384              		.loc 1 332 0
 385 005c 244A     		ldr	r2, .L41
 386 005e D2F80C12 		ldr	r1, [r2, #524]
 387 0062 1943     		orrs	r1, r1, r3
 388 0064 C2F80C12 		str	r1, [r2, #524]
 334:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 389              		.loc 1 334 0
 390 0068 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 335:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 391              		.loc 1 335 0
 392 006a 0688     		ldrh	r6, [r0]
 336:./libraries/src/stm32f10x_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 393              		.loc 1 336 0
 394 006c 4588     		ldrh	r5, [r0, #2]
 335:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 395              		.loc 1 335 0
 396 006e 45EA0645 		orr	r5, r5, r6, lsl #16
 334:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 397              		.loc 1 334 0
 398 0072 4831     		adds	r1, r1, #72
 399 0074 42F83150 		str	r5, [r2, r1, lsl #3]
 338:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 400              		.loc 1 338 0
 401 0078 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 339:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 402              		.loc 1 339 0
 403 007a 8688     		ldrh	r6, [r0, #4]
 340:./libraries/src/stm32f10x_can.c ****   }
 404              		.loc 1 340 0
 405 007c C188     		ldrh	r1, [r0, #6]
 339:./libraries/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 406              		.loc 1 339 0
 407 007e 41EA0641 		orr	r1, r1, r6, lsl #16
ARM GAS  /tmp/cc1CGZq2.s 			page 34


 338:./libraries/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 408              		.loc 1 338 0
 409 0082 4835     		adds	r5, r5, #72
 410 0084 02EBC502 		add	r2, r2, r5, lsl #3
 411 0088 5160     		str	r1, [r2, #4]
 412              	.L34:
 344:./libraries/src/stm32f10x_can.c ****   {
 413              		.loc 1 344 0
 414 008a C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 415 008c 32B9     		cbnz	r2, .L35
 347:./libraries/src/stm32f10x_can.c ****   }
 416              		.loc 1 347 0
 417 008e 1849     		ldr	r1, .L41
 418 0090 D1F80422 		ldr	r2, [r1, #516]
 419 0094 2240     		ands	r2, r2, r4
 420 0096 C1F80422 		str	r2, [r1, #516]
 421 009a 05E0     		b	.L36
 422              	.L35:
 352:./libraries/src/stm32f10x_can.c ****   }
 423              		.loc 1 352 0
 424 009c 1449     		ldr	r1, .L41
 425 009e D1F80422 		ldr	r2, [r1, #516]
 426 00a2 1A43     		orrs	r2, r2, r3
 427 00a4 C1F80422 		str	r2, [r1, #516]
 428              	.L36:
 356:./libraries/src/stm32f10x_can.c ****   {
 429              		.loc 1 356 0
 430 00a8 0289     		ldrh	r2, [r0, #8]
 431 00aa 2AB9     		cbnz	r2, .L37
 359:./libraries/src/stm32f10x_can.c ****   }
 432              		.loc 1 359 0
 433 00ac 1049     		ldr	r1, .L41
 434 00ae D1F81422 		ldr	r2, [r1, #532]
 435 00b2 1440     		ands	r4, r4, r2
 436 00b4 C1F81442 		str	r4, [r1, #532]
 437              	.L37:
 362:./libraries/src/stm32f10x_can.c ****   {
 438              		.loc 1 362 0
 439 00b8 0289     		ldrh	r2, [r0, #8]
 440 00ba 012A     		cmp	r2, #1
 441 00bc 05D1     		bne	.L38
 365:./libraries/src/stm32f10x_can.c ****   }
 442              		.loc 1 365 0
 443 00be 0C49     		ldr	r1, .L41
 444 00c0 D1F81422 		ldr	r2, [r1, #532]
 445 00c4 1A43     		orrs	r2, r2, r3
 446 00c6 C1F81422 		str	r2, [r1, #532]
 447              	.L38:
 369:./libraries/src/stm32f10x_can.c ****   {
 448              		.loc 1 369 0
 449 00ca 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 450 00cc 012A     		cmp	r2, #1
 451 00ce 05D1     		bne	.L39
 371:./libraries/src/stm32f10x_can.c ****   }
 452              		.loc 1 371 0
 453 00d0 0749     		ldr	r1, .L41
 454 00d2 D1F81C22 		ldr	r2, [r1, #540]
ARM GAS  /tmp/cc1CGZq2.s 			page 35


 455 00d6 1343     		orrs	r3, r3, r2
 456              	.LVL28:
 457 00d8 C1F81C32 		str	r3, [r1, #540]
 458              	.L39:
 375:./libraries/src/stm32f10x_can.c **** }
 459              		.loc 1 375 0
 460 00dc 044A     		ldr	r2, .L41
 461 00de D2F80032 		ldr	r3, [r2, #512]
 462 00e2 23F00103 		bic	r3, r3, #1
 463 00e6 C2F80032 		str	r3, [r2, #512]
 376:./libraries/src/stm32f10x_can.c **** 
 464              		.loc 1 376 0
 465 00ea 70BC     		pop	{r4, r5, r6}
 466              	.LCFI2:
 467              		.cfi_restore 6
 468              		.cfi_restore 5
 469              		.cfi_restore 4
 470              		.cfi_def_cfa_offset 0
 471 00ec 7047     		bx	lr
 472              	.L42:
 473 00ee 00BF     		.align	2
 474              	.L41:
 475 00f0 00640040 		.word	1073767424
 476              		.cfi_endproc
 477              	.LFE31:
 479              		.section	.text.CAN_StructInit,"ax",%progbits
 480              		.align	2
 481              		.global	CAN_StructInit
 482              		.thumb
 483              		.thumb_func
 485              	CAN_StructInit:
 486              	.LFB32:
 385:./libraries/src/stm32f10x_can.c ****   /* Reset CAN init structure parameters values */
 487              		.loc 1 385 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492              	.LVL29:
 389:./libraries/src/stm32f10x_can.c ****   
 493              		.loc 1 389 0
 494 0000 0023     		movs	r3, #0
 495 0002 8371     		strb	r3, [r0, #6]
 392:./libraries/src/stm32f10x_can.c ****   
 496              		.loc 1 392 0
 497 0004 C371     		strb	r3, [r0, #7]
 395:./libraries/src/stm32f10x_can.c ****   
 498              		.loc 1 395 0
 499 0006 0372     		strb	r3, [r0, #8]
 398:./libraries/src/stm32f10x_can.c ****   
 500              		.loc 1 398 0
 501 0008 4372     		strb	r3, [r0, #9]
 401:./libraries/src/stm32f10x_can.c ****   
 502              		.loc 1 401 0
 503 000a 8372     		strb	r3, [r0, #10]
 404:./libraries/src/stm32f10x_can.c ****   
 504              		.loc 1 404 0
ARM GAS  /tmp/cc1CGZq2.s 			page 36


 505 000c C372     		strb	r3, [r0, #11]
 407:./libraries/src/stm32f10x_can.c ****   
 506              		.loc 1 407 0
 507 000e 8370     		strb	r3, [r0, #2]
 410:./libraries/src/stm32f10x_can.c ****   
 508              		.loc 1 410 0
 509 0010 C370     		strb	r3, [r0, #3]
 413:./libraries/src/stm32f10x_can.c ****   
 510              		.loc 1 413 0
 511 0012 0323     		movs	r3, #3
 512 0014 0371     		strb	r3, [r0, #4]
 416:./libraries/src/stm32f10x_can.c ****   
 513              		.loc 1 416 0
 514 0016 0223     		movs	r3, #2
 515 0018 4371     		strb	r3, [r0, #5]
 419:./libraries/src/stm32f10x_can.c **** }
 516              		.loc 1 419 0
 517 001a 0123     		movs	r3, #1
 518 001c 0380     		strh	r3, [r0]	@ movhi
 519 001e 7047     		bx	lr
 520              		.cfi_endproc
 521              	.LFE32:
 523              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 524              		.align	2
 525              		.global	CAN_SlaveStartBank
 526              		.thumb
 527              		.thumb_func
 529              	CAN_SlaveStartBank:
 530              	.LFB33:
 429:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 531              		.loc 1 429 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 536              	.LVL30:
 434:./libraries/src/stm32f10x_can.c ****   
 537              		.loc 1 434 0
 538 0000 0D4B     		ldr	r3, .L45
 539 0002 D3F80022 		ldr	r2, [r3, #512]
 540 0006 42F00102 		orr	r2, r2, #1
 541 000a C3F80022 		str	r2, [r3, #512]
 437:./libraries/src/stm32f10x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 542              		.loc 1 437 0
 543 000e D3F80022 		ldr	r2, [r3, #512]
 544 0012 22F47C52 		bic	r2, r2, #16128
 545 0016 22F00E02 		bic	r2, r2, #14
 546 001a C3F80022 		str	r2, [r3, #512]
 438:./libraries/src/stm32f10x_can.c ****   
 547              		.loc 1 438 0
 548 001e D3F80022 		ldr	r2, [r3, #512]
 549 0022 42EA0020 		orr	r0, r2, r0, lsl #8
 550              	.LVL31:
 551 0026 C3F80002 		str	r0, [r3, #512]
 441:./libraries/src/stm32f10x_can.c **** }
 552              		.loc 1 441 0
 553 002a D3F80022 		ldr	r2, [r3, #512]
ARM GAS  /tmp/cc1CGZq2.s 			page 37


 554 002e 22F00102 		bic	r2, r2, #1
 555 0032 C3F80022 		str	r2, [r3, #512]
 556 0036 7047     		bx	lr
 557              	.L46:
 558              		.align	2
 559              	.L45:
 560 0038 00640040 		.word	1073767424
 561              		.cfi_endproc
 562              	.LFE33:
 564              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 565              		.align	2
 566              		.global	CAN_DBGFreeze
 567              		.thumb
 568              		.thumb_func
 570              	CAN_DBGFreeze:
 571              	.LFB34:
 452:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 572              		.loc 1 452 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577              	.LVL32:
 457:./libraries/src/stm32f10x_can.c ****   {
 578              		.loc 1 457 0
 579 0000 21B1     		cbz	r1, .L48
 460:./libraries/src/stm32f10x_can.c ****   }
 580              		.loc 1 460 0
 581 0002 0368     		ldr	r3, [r0]
 582 0004 43F48033 		orr	r3, r3, #65536
 583 0008 0360     		str	r3, [r0]
 584 000a 7047     		bx	lr
 585              	.L48:
 465:./libraries/src/stm32f10x_can.c ****   }
 586              		.loc 1 465 0
 587 000c 0368     		ldr	r3, [r0]
 588 000e 23F48033 		bic	r3, r3, #65536
 589 0012 0360     		str	r3, [r0]
 590 0014 7047     		bx	lr
 591              		.cfi_endproc
 592              	.LFE34:
 594 0016 00BF     		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 595              		.align	2
 596              		.global	CAN_TTComModeCmd
 597              		.thumb
 598              		.thumb_func
 600              	CAN_TTComModeCmd:
 601              	.LFB35:
 482:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 602              		.loc 1 482 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              		@ link register save eliminated.
 607              	.LVL33:
 486:./libraries/src/stm32f10x_can.c ****   {
 608              		.loc 1 486 0
ARM GAS  /tmp/cc1CGZq2.s 			page 38


 609 0000 B1B1     		cbz	r1, .L51
 489:./libraries/src/stm32f10x_can.c **** 
 610              		.loc 1 489 0
 611 0002 0368     		ldr	r3, [r0]
 612 0004 43F08003 		orr	r3, r3, #128
 613 0008 0360     		str	r3, [r0]
 492:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 614              		.loc 1 492 0
 615 000a D0F88431 		ldr	r3, [r0, #388]
 616 000e 43F48073 		orr	r3, r3, #256
 617 0012 C0F88431 		str	r3, [r0, #388]
 493:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 618              		.loc 1 493 0
 619 0016 D0F89431 		ldr	r3, [r0, #404]
 620 001a 43F48073 		orr	r3, r3, #256
 621 001e C0F89431 		str	r3, [r0, #404]
 494:./libraries/src/stm32f10x_can.c ****   }
 622              		.loc 1 494 0
 623 0022 D0F8A431 		ldr	r3, [r0, #420]
 624 0026 43F48073 		orr	r3, r3, #256
 625 002a C0F8A431 		str	r3, [r0, #420]
 626 002e 7047     		bx	lr
 627              	.L51:
 499:./libraries/src/stm32f10x_can.c **** 
 628              		.loc 1 499 0
 629 0030 0368     		ldr	r3, [r0]
 630 0032 23F08003 		bic	r3, r3, #128
 631 0036 0360     		str	r3, [r0]
 502:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 632              		.loc 1 502 0
 633 0038 D0F88431 		ldr	r3, [r0, #388]
 634 003c 23F48073 		bic	r3, r3, #256
 635 0040 C0F88431 		str	r3, [r0, #388]
 503:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 636              		.loc 1 503 0
 637 0044 D0F89431 		ldr	r3, [r0, #404]
 638 0048 23F48073 		bic	r3, r3, #256
 639 004c C0F89431 		str	r3, [r0, #404]
 504:./libraries/src/stm32f10x_can.c ****   }
 640              		.loc 1 504 0
 641 0050 D0F8A431 		ldr	r3, [r0, #420]
 642 0054 23F48073 		bic	r3, r3, #256
 643 0058 C0F8A431 		str	r3, [r0, #420]
 644 005c 7047     		bx	lr
 645              		.cfi_endproc
 646              	.LFE35:
 648 005e 00BF     		.section	.text.CAN_Transmit,"ax",%progbits
 649              		.align	2
 650              		.global	CAN_Transmit
 651              		.thumb
 652              		.thumb_func
 654              	CAN_Transmit:
 655              	.LFB36:
 516:./libraries/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 656              		.loc 1 516 0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc1CGZq2.s 			page 39


 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 661              	.LVL34:
 662 0000 0346     		mov	r3, r0
 663              	.LVL35:
 525:./libraries/src/stm32f10x_can.c ****   {
 664              		.loc 1 525 0
 665 0002 8268     		ldr	r2, [r0, #8]
 666 0004 12F0806F 		tst	r2, #67108864
 667 0008 09D1     		bne	.L58
 529:./libraries/src/stm32f10x_can.c ****   {
 668              		.loc 1 529 0
 669 000a 8268     		ldr	r2, [r0, #8]
 670 000c 12F0006F 		tst	r2, #134217728
 671 0010 07D1     		bne	.L59
 533:./libraries/src/stm32f10x_can.c ****   {
 672              		.loc 1 533 0
 673 0012 8268     		ldr	r2, [r0, #8]
 674 0014 12F0805F 		tst	r2, #268435456
 675 0018 05D0     		beq	.L60
 535:./libraries/src/stm32f10x_can.c ****   }
 676              		.loc 1 535 0
 677 001a 0220     		movs	r0, #2
 678              	.LVL36:
 679 001c 04E0     		b	.L54
 680              	.LVL37:
 681              	.L58:
 527:./libraries/src/stm32f10x_can.c ****   }
 682              		.loc 1 527 0
 683 001e 0020     		movs	r0, #0
 684              	.LVL38:
 685 0020 02E0     		b	.L54
 686              	.LVL39:
 687              	.L59:
 531:./libraries/src/stm32f10x_can.c ****   }
 688              		.loc 1 531 0
 689 0022 0120     		movs	r0, #1
 690              	.LVL40:
 691 0024 00E0     		b	.L54
 692              	.LVL41:
 693              	.L60:
 539:./libraries/src/stm32f10x_can.c ****   }
 694              		.loc 1 539 0
 695 0026 0420     		movs	r0, #4
 696              	.LVL42:
 697              	.L54:
 542:./libraries/src/stm32f10x_can.c ****   {
 698              		.loc 1 542 0
 699 0028 0428     		cmp	r0, #4
 700 002a 4FD0     		beq	.L63
 516:./libraries/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 701              		.loc 1 516 0
 702 002c F0B4     		push	{r4, r5, r6, r7}
 703              	.LCFI3:
 704              		.cfi_def_cfa_offset 16
 705              		.cfi_offset 4, -16
 706              		.cfi_offset 5, -12
ARM GAS  /tmp/cc1CGZq2.s 			page 40


 707              		.cfi_offset 6, -8
 708              		.cfi_offset 7, -4
 545:./libraries/src/stm32f10x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 709              		.loc 1 545 0
 710 002e 0546     		mov	r5, r0
 711 0030 00F11802 		add	r2, r0, #24
 712 0034 1201     		lsls	r2, r2, #4
 713 0036 9C58     		ldr	r4, [r3, r2]
 714 0038 04F00104 		and	r4, r4, #1
 715 003c 9C50     		str	r4, [r3, r2]
 546:./libraries/src/stm32f10x_can.c ****     {
 716              		.loc 1 546 0
 717 003e 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 718 0040 52B9     		cbnz	r2, .L56
 549:./libraries/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 719              		.loc 1 549 0
 720 0042 00F11806 		add	r6, r0, #24
 721 0046 3601     		lsls	r6, r6, #4
 722 0048 9F59     		ldr	r7, [r3, r6]
 723 004a 0A68     		ldr	r2, [r1]
 550:./libraries/src/stm32f10x_can.c ****     }
 724              		.loc 1 550 0
 725 004c 4C7A     		ldrb	r4, [r1, #9]	@ zero_extendqisi2
 549:./libraries/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 726              		.loc 1 549 0
 727 004e 44EA4252 		orr	r2, r4, r2, lsl #21
 728 0052 3A43     		orrs	r2, r2, r7
 729 0054 9A51     		str	r2, [r3, r6]
 730 0056 0AE0     		b	.L57
 731              	.L56:
 555:./libraries/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 732              		.loc 1 555 0
 733 0058 00F11806 		add	r6, r0, #24
 734 005c 3601     		lsls	r6, r6, #4
 735 005e 9F59     		ldr	r7, [r3, r6]
 736 0060 4C68     		ldr	r4, [r1, #4]
 737 0062 42EAC404 		orr	r4, r2, r4, lsl #3
 557:./libraries/src/stm32f10x_can.c ****     }
 738              		.loc 1 557 0
 739 0066 4A7A     		ldrb	r2, [r1, #9]	@ zero_extendqisi2
 556:./libraries/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 740              		.loc 1 556 0
 741 0068 2243     		orrs	r2, r2, r4
 555:./libraries/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 742              		.loc 1 555 0
 743 006a 3A43     		orrs	r2, r2, r7
 744 006c 9A51     		str	r2, [r3, r6]
 745              	.L57:
 561:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 746              		.loc 1 561 0
 747 006e 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 748 0070 02F00F02 		and	r2, r2, #15
 749 0074 8A72     		strb	r2, [r1, #10]
 562:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 750              		.loc 1 562 0
 751 0076 05F11804 		add	r4, r5, #24
 752 007a 2401     		lsls	r4, r4, #4
ARM GAS  /tmp/cc1CGZq2.s 			page 41


 753 007c 1A19     		adds	r2, r3, r4
 754 007e 5668     		ldr	r6, [r2, #4]
 755 0080 26F00F06 		bic	r6, r6, #15
 756 0084 5660     		str	r6, [r2, #4]
 563:./libraries/src/stm32f10x_can.c **** 
 757              		.loc 1 563 0
 758 0086 5668     		ldr	r6, [r2, #4]
 759 0088 8F7A     		ldrb	r7, [r1, #10]	@ zero_extendqisi2
 760 008a 3E43     		orrs	r6, r6, r7
 761 008c 5660     		str	r6, [r2, #4]
 566:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 762              		.loc 1 566 0
 763 008e 8E7B     		ldrb	r6, [r1, #14]	@ zero_extendqisi2
 567:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 764              		.loc 1 567 0
 765 0090 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 766 0092 1204     		lsls	r2, r2, #16
 566:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 767              		.loc 1 566 0
 768 0094 42EA0662 		orr	r2, r2, r6, lsl #24
 568:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 769              		.loc 1 568 0
 770 0098 0E7B     		ldrb	r6, [r1, #12]	@ zero_extendqisi2
 567:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 771              		.loc 1 567 0
 772 009a 42EA0622 		orr	r2, r2, r6, lsl #8
 569:./libraries/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 773              		.loc 1 569 0
 774 009e CE7A     		ldrb	r6, [r1, #11]	@ zero_extendqisi2
 568:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 775              		.loc 1 568 0
 776 00a0 3243     		orrs	r2, r2, r6
 566:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 777              		.loc 1 566 0
 778 00a2 03EB0515 		add	r5, r3, r5, lsl #4
 779 00a6 C5F88821 		str	r2, [r5, #392]
 570:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 780              		.loc 1 570 0
 781 00aa 8E7C     		ldrb	r6, [r1, #18]	@ zero_extendqisi2
 571:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 782              		.loc 1 571 0
 783 00ac 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 784 00ae 1204     		lsls	r2, r2, #16
 570:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 785              		.loc 1 570 0
 786 00b0 42EA0662 		orr	r2, r2, r6, lsl #24
 572:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 787              		.loc 1 572 0
 788 00b4 0E7C     		ldrb	r6, [r1, #16]	@ zero_extendqisi2
 571:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 789              		.loc 1 571 0
 790 00b6 42EA0622 		orr	r2, r2, r6, lsl #8
 573:./libraries/src/stm32f10x_can.c ****     /* Request transmission */
 791              		.loc 1 573 0
 792 00ba C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 793              	.LVL43:
 572:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
ARM GAS  /tmp/cc1CGZq2.s 			page 42


 794              		.loc 1 572 0
 795 00bc 0A43     		orrs	r2, r2, r1
 570:./libraries/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 796              		.loc 1 570 0
 797 00be C5F88C21 		str	r2, [r5, #396]
 575:./libraries/src/stm32f10x_can.c ****   }
 798              		.loc 1 575 0
 799 00c2 1A59     		ldr	r2, [r3, r4]
 800 00c4 42F00102 		orr	r2, r2, #1
 801 00c8 1A51     		str	r2, [r3, r4]
 578:./libraries/src/stm32f10x_can.c **** 
 802              		.loc 1 578 0
 803 00ca F0BC     		pop	{r4, r5, r6, r7}
 804              	.LCFI4:
 805              		.cfi_restore 7
 806              		.cfi_restore 6
 807              		.cfi_restore 5
 808              		.cfi_restore 4
 809              		.cfi_def_cfa_offset 0
 810              	.L63:
 811 00cc 7047     		bx	lr
 812              		.cfi_endproc
 813              	.LFE36:
 815 00ce 00BF     		.section	.text.CAN_TransmitStatus,"ax",%progbits
 816              		.align	2
 817              		.global	CAN_TransmitStatus
 818              		.thumb
 819              		.thumb_func
 821              	CAN_TransmitStatus:
 822              	.LFB37:
 590:./libraries/src/stm32f10x_can.c ****   uint32_t state = 0;
 823              		.loc 1 590 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827              		@ link register save eliminated.
 828              	.LVL44:
 597:./libraries/src/stm32f10x_can.c ****   {
 829              		.loc 1 597 0
 830 0000 0129     		cmp	r1, #1
 831 0002 0DD0     		beq	.L66
 832 0004 11B1     		cbz	r1, .L67
 833 0006 0229     		cmp	r1, #2
 834 0008 0ED0     		beq	.L68
 835 000a 15E0     		b	.L77
 836              	.L67:
 600:./libraries/src/stm32f10x_can.c ****       break;
 837              		.loc 1 600 0
 838 000c 8368     		ldr	r3, [r0, #8]
 839 000e 23F07B43 		bic	r3, r3, #-83886080
 840 0012 23F47F03 		bic	r3, r3, #16711680
 841 0016 23F47F43 		bic	r3, r3, #65280
 842 001a 23F0FC03 		bic	r3, r3, #252
 843              	.LVL45:
 601:./libraries/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): 
 844              		.loc 1 601 0
 845 001e 0CE0     		b	.L65
ARM GAS  /tmp/cc1CGZq2.s 			page 43


 846              	.LVL46:
 847              	.L66:
 603:./libraries/src/stm32f10x_can.c ****       break;
 848              		.loc 1 603 0
 849 0020 8268     		ldr	r2, [r0, #8]
 850 0022 114B     		ldr	r3, .L78
 851 0024 1340     		ands	r3, r3, r2
 852              	.LVL47:
 604:./libraries/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): 
 853              		.loc 1 604 0
 854 0026 08E0     		b	.L65
 855              	.LVL48:
 856              	.L68:
 606:./libraries/src/stm32f10x_can.c ****       break;
 857              		.loc 1 606 0
 858 0028 8368     		ldr	r3, [r0, #8]
 859 002a 23F06F43 		bic	r3, r3, #-285212672
 860 002e 23F47C03 		bic	r3, r3, #16515072
 861 0032 1B0C     		lsrs	r3, r3, #16
 862 0034 1B04     		lsls	r3, r3, #16
 863              	.LVL49:
 607:./libraries/src/stm32f10x_can.c ****     default:
 864              		.loc 1 607 0
 865 0036 00E0     		b	.L65
 866              	.LVL50:
 867              	.L77:
 609:./libraries/src/stm32f10x_can.c ****       break;
 868              		.loc 1 609 0
 869 0038 0023     		movs	r3, #0
 870              	.LVL51:
 871              	.L65:
 612:./libraries/src/stm32f10x_can.c ****   {
 872              		.loc 1 612 0
 873 003a 0C4A     		ldr	r2, .L78+4
 874 003c 9342     		cmp	r3, r2
 875 003e 0BD0     		beq	.L70
 876 0040 01D8     		bhi	.L71
 877 0042 3BB1     		cbz	r3, .L72
 878 0044 0EE0     		b	.L76
 879              	.L71:
 880 0046 084A     		ldr	r2, .L78
 881 0048 9342     		cmp	r3, r2
 882 004a 07D0     		beq	.L73
 883 004c 084A     		ldr	r2, .L78+8
 884 004e 9342     		cmp	r3, r2
 885 0050 06D0     		beq	.L74
 886 0052 07E0     		b	.L76
 887              	.L72:
 615:./libraries/src/stm32f10x_can.c ****       break;
 888              		.loc 1 615 0
 889 0054 0220     		movs	r0, #2
 890              	.LVL52:
 891 0056 7047     		bx	lr
 892              	.LVL53:
 893              	.L70:
 625:./libraries/src/stm32f10x_can.c ****       break;
 894              		.loc 1 625 0
ARM GAS  /tmp/cc1CGZq2.s 			page 44


 895 0058 0120     		movs	r0, #1
 896              	.LVL54:
 626:./libraries/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 897              		.loc 1 626 0
 898 005a 7047     		bx	lr
 899              	.LVL55:
 900              	.L73:
 627:./libraries/src/stm32f10x_can.c ****       break;
 901              		.loc 1 627 0
 902 005c 0120     		movs	r0, #1
 903              	.LVL56:
 628:./libraries/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 904              		.loc 1 628 0
 905 005e 7047     		bx	lr
 906              	.LVL57:
 907              	.L74:
 629:./libraries/src/stm32f10x_can.c ****       break;
 908              		.loc 1 629 0
 909 0060 0120     		movs	r0, #1
 910              	.LVL58:
 630:./libraries/src/stm32f10x_can.c ****     default: state = CAN_TxStatus_Failed;
 911              		.loc 1 630 0
 912 0062 7047     		bx	lr
 913              	.LVL59:
 914              	.L76:
 618:./libraries/src/stm32f10x_can.c ****       break;
 915              		.loc 1 618 0
 916 0064 0020     		movs	r0, #0
 917              	.LVL60:
 635:./libraries/src/stm32f10x_can.c **** 
 918              		.loc 1 635 0
 919 0066 7047     		bx	lr
 920              	.L79:
 921              		.align	2
 922              	.L78:
 923 0068 00030008 		.word	134218496
 924 006c 03000004 		.word	67108867
 925 0070 00000310 		.word	268632064
 926              		.cfi_endproc
 927              	.LFE37:
 929              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 930              		.align	2
 931              		.global	CAN_CancelTransmit
 932              		.thumb
 933              		.thumb_func
 935              	CAN_CancelTransmit:
 936              	.LFB38:
 644:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 937              		.loc 1 644 0
 938              		.cfi_startproc
 939              		@ args = 0, pretend = 0, frame = 0
 940              		@ frame_needed = 0, uses_anonymous_args = 0
 941              		@ link register save eliminated.
 942              	.LVL61:
 649:./libraries/src/stm32f10x_can.c ****   {
 943              		.loc 1 649 0
 944 0000 0129     		cmp	r1, #1
ARM GAS  /tmp/cc1CGZq2.s 			page 45


 945 0002 08D0     		beq	.L82
 946 0004 11B1     		cbz	r1, .L83
 947 0006 0229     		cmp	r1, #2
 948 0008 0AD0     		beq	.L84
 949 000a 7047     		bx	lr
 950              	.L83:
 651:./libraries/src/stm32f10x_can.c ****       break;
 951              		.loc 1 651 0
 952 000c 8368     		ldr	r3, [r0, #8]
 953 000e 43F08003 		orr	r3, r3, #128
 954 0012 8360     		str	r3, [r0, #8]
 652:./libraries/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 955              		.loc 1 652 0
 956 0014 7047     		bx	lr
 957              	.L82:
 653:./libraries/src/stm32f10x_can.c ****       break;
 958              		.loc 1 653 0
 959 0016 8368     		ldr	r3, [r0, #8]
 960 0018 43F40043 		orr	r3, r3, #32768
 961 001c 8360     		str	r3, [r0, #8]
 654:./libraries/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 962              		.loc 1 654 0
 963 001e 7047     		bx	lr
 964              	.L84:
 655:./libraries/src/stm32f10x_can.c ****       break;
 965              		.loc 1 655 0
 966 0020 8368     		ldr	r3, [r0, #8]
 967 0022 43F40003 		orr	r3, r3, #8388608
 968 0026 8360     		str	r3, [r0, #8]
 969 0028 7047     		bx	lr
 970              		.cfi_endproc
 971              	.LFE38:
 973 002a 00BF     		.section	.text.CAN_Receive,"ax",%progbits
 974              		.align	2
 975              		.global	CAN_Receive
 976              		.thumb
 977              		.thumb_func
 979              	CAN_Receive:
 980              	.LFB39:
 672:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 981              		.loc 1 672 0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 0
 984              		@ frame_needed = 0, uses_anonymous_args = 0
 985              		@ link register save eliminated.
 986              	.LVL62:
 987 0000 10B4     		push	{r4}
 988              	.LCFI5:
 989              		.cfi_def_cfa_offset 4
 990              		.cfi_offset 4, -4
 677:./libraries/src/stm32f10x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 991              		.loc 1 677 0
 992 0002 01F11B03 		add	r3, r1, #27
 993 0006 1B01     		lsls	r3, r3, #4
 994 0008 C358     		ldr	r3, [r0, r3]
 995 000a 03F00403 		and	r3, r3, #4
 996 000e DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc1CGZq2.s 			page 46


 997 0010 1372     		strb	r3, [r2, #8]
 678:./libraries/src/stm32f10x_can.c ****   {
 998              		.loc 1 678 0
 999 0012 33B9     		cbnz	r3, .L86
 680:./libraries/src/stm32f10x_can.c ****   }
 1000              		.loc 1 680 0
 1001 0014 01F11B03 		add	r3, r1, #27
 1002 0018 1B01     		lsls	r3, r3, #4
 1003 001a C358     		ldr	r3, [r0, r3]
 1004 001c 5B0D     		lsrs	r3, r3, #21
 1005 001e 1360     		str	r3, [r2]
 1006 0020 05E0     		b	.L87
 1007              	.L86:
 684:./libraries/src/stm32f10x_can.c ****   }
 1008              		.loc 1 684 0
 1009 0022 01F11B03 		add	r3, r1, #27
 1010 0026 1B01     		lsls	r3, r3, #4
 1011 0028 C358     		ldr	r3, [r0, r3]
 1012 002a DB08     		lsrs	r3, r3, #3
 1013 002c 5360     		str	r3, [r2, #4]
 1014              	.L87:
 687:./libraries/src/stm32f10x_can.c ****   /* Get the DLC */
 1015              		.loc 1 687 0
 1016 002e 01F11B03 		add	r3, r1, #27
 1017 0032 1B01     		lsls	r3, r3, #4
 1018 0034 C418     		adds	r4, r0, r3
 1019 0036 C358     		ldr	r3, [r0, r3]
 1020 0038 03F00203 		and	r3, r3, #2
 1021 003c 5372     		strb	r3, [r2, #9]
 689:./libraries/src/stm32f10x_can.c ****   /* Get the FMI */
 1022              		.loc 1 689 0
 1023 003e 6368     		ldr	r3, [r4, #4]
 1024 0040 03F00F03 		and	r3, r3, #15
 1025 0044 9372     		strb	r3, [r2, #10]
 691:./libraries/src/stm32f10x_can.c ****   /* Get the data field */
 1026              		.loc 1 691 0
 1027 0046 6368     		ldr	r3, [r4, #4]
 1028 0048 1B0A     		lsrs	r3, r3, #8
 1029 004a D374     		strb	r3, [r2, #19]
 693:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1030              		.loc 1 693 0
 1031 004c 00EB0113 		add	r3, r0, r1, lsl #4
 1032 0050 D3F8B841 		ldr	r4, [r3, #440]
 1033 0054 D472     		strb	r4, [r2, #11]
 694:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1034              		.loc 1 694 0
 1035 0056 D3F8B841 		ldr	r4, [r3, #440]
 1036 005a 240A     		lsrs	r4, r4, #8
 1037 005c 1473     		strb	r4, [r2, #12]
 695:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1038              		.loc 1 695 0
 1039 005e D3F8B841 		ldr	r4, [r3, #440]
 1040 0062 240C     		lsrs	r4, r4, #16
 1041 0064 5473     		strb	r4, [r2, #13]
 696:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1042              		.loc 1 696 0
 1043 0066 D3F8B841 		ldr	r4, [r3, #440]
ARM GAS  /tmp/cc1CGZq2.s 			page 47


 1044 006a 240E     		lsrs	r4, r4, #24
 1045 006c 9473     		strb	r4, [r2, #14]
 697:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1046              		.loc 1 697 0
 1047 006e D3F8BC41 		ldr	r4, [r3, #444]
 1048 0072 D473     		strb	r4, [r2, #15]
 698:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1049              		.loc 1 698 0
 1050 0074 D3F8BC41 		ldr	r4, [r3, #444]
 1051 0078 240A     		lsrs	r4, r4, #8
 1052 007a 1474     		strb	r4, [r2, #16]
 699:./libraries/src/stm32f10x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1053              		.loc 1 699 0
 1054 007c D3F8BC41 		ldr	r4, [r3, #444]
 1055 0080 240C     		lsrs	r4, r4, #16
 1056 0082 5474     		strb	r4, [r2, #17]
 700:./libraries/src/stm32f10x_can.c ****   /* Release the FIFO */
 1057              		.loc 1 700 0
 1058 0084 D3F8BC31 		ldr	r3, [r3, #444]
 1059 0088 1B0E     		lsrs	r3, r3, #24
 1060 008a 9374     		strb	r3, [r2, #18]
 703:./libraries/src/stm32f10x_can.c ****   {
 1061              		.loc 1 703 0
 1062 008c 21B9     		cbnz	r1, .L88
 705:./libraries/src/stm32f10x_can.c ****   }
 1063              		.loc 1 705 0
 1064 008e C368     		ldr	r3, [r0, #12]
 1065 0090 43F02003 		orr	r3, r3, #32
 1066 0094 C360     		str	r3, [r0, #12]
 1067 0096 03E0     		b	.L85
 1068              	.L88:
 710:./libraries/src/stm32f10x_can.c ****   }
 1069              		.loc 1 710 0
 1070 0098 0369     		ldr	r3, [r0, #16]
 1071 009a 43F02003 		orr	r3, r3, #32
 1072 009e 0361     		str	r3, [r0, #16]
 1073              	.L85:
 712:./libraries/src/stm32f10x_can.c **** 
 1074              		.loc 1 712 0
 1075 00a0 10BC     		pop	{r4}
 1076              	.LCFI6:
 1077              		.cfi_restore 4
 1078              		.cfi_def_cfa_offset 0
 1079 00a2 7047     		bx	lr
 1080              		.cfi_endproc
 1081              	.LFE39:
 1083              		.section	.text.CAN_FIFORelease,"ax",%progbits
 1084              		.align	2
 1085              		.global	CAN_FIFORelease
 1086              		.thumb
 1087              		.thumb_func
 1089              	CAN_FIFORelease:
 1090              	.LFB40:
 721:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 1091              		.loc 1 721 0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc1CGZq2.s 			page 48


 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 1095              		@ link register save eliminated.
 1096              	.LVL63:
 726:./libraries/src/stm32f10x_can.c ****   {
 1097              		.loc 1 726 0
 1098 0000 21B9     		cbnz	r1, .L92
 728:./libraries/src/stm32f10x_can.c ****   }
 1099              		.loc 1 728 0
 1100 0002 C368     		ldr	r3, [r0, #12]
 1101 0004 43F02003 		orr	r3, r3, #32
 1102 0008 C360     		str	r3, [r0, #12]
 1103 000a 7047     		bx	lr
 1104              	.L92:
 733:./libraries/src/stm32f10x_can.c ****   }
 1105              		.loc 1 733 0
 1106 000c 0369     		ldr	r3, [r0, #16]
 1107 000e 43F02003 		orr	r3, r3, #32
 1108 0012 0361     		str	r3, [r0, #16]
 1109 0014 7047     		bx	lr
 1110              		.cfi_endproc
 1111              	.LFE40:
 1113 0016 00BF     		.section	.text.CAN_MessagePending,"ax",%progbits
 1114              		.align	2
 1115              		.global	CAN_MessagePending
 1116              		.thumb
 1117              		.thumb_func
 1119              	CAN_MessagePending:
 1120              	.LFB41:
 744:./libraries/src/stm32f10x_can.c ****   uint8_t message_pending=0;
 1121              		.loc 1 744 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 0
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125              		@ link register save eliminated.
 1126              	.LVL64:
 749:./libraries/src/stm32f10x_can.c ****   {
 1127              		.loc 1 749 0
 1128 0000 19B9     		cbnz	r1, .L95
 751:./libraries/src/stm32f10x_can.c ****   }
 1129              		.loc 1 751 0
 1130 0002 C068     		ldr	r0, [r0, #12]
 1131              	.LVL65:
 1132 0004 00F00300 		and	r0, r0, #3
 1133              	.LVL66:
 1134 0008 7047     		bx	lr
 1135              	.LVL67:
 1136              	.L95:
 753:./libraries/src/stm32f10x_can.c ****   {
 1137              		.loc 1 753 0
 1138 000a 0129     		cmp	r1, #1
 1139 000c 03D1     		bne	.L97
 755:./libraries/src/stm32f10x_can.c ****   }
 1140              		.loc 1 755 0
 1141 000e 0069     		ldr	r0, [r0, #16]
 1142              	.LVL68:
 1143 0010 00F00300 		and	r0, r0, #3
 1144              	.LVL69:
ARM GAS  /tmp/cc1CGZq2.s 			page 49


 1145 0014 7047     		bx	lr
 1146              	.LVL70:
 1147              	.L97:
 759:./libraries/src/stm32f10x_can.c ****   }
 1148              		.loc 1 759 0
 1149 0016 0020     		movs	r0, #0
 1150              	.LVL71:
 762:./libraries/src/stm32f10x_can.c **** 
 1151              		.loc 1 762 0
 1152 0018 7047     		bx	lr
 1153              		.cfi_endproc
 1154              	.LFE41:
 1156 001a 00BF     		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1157              		.align	2
 1158              		.global	CAN_OperatingModeRequest
 1159              		.thumb
 1160              		.thumb_func
 1162              	CAN_OperatingModeRequest:
 1163              	.LFB42:
 775:./libraries/src/stm32f10x_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1164              		.loc 1 775 0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 0
 1167              		@ frame_needed = 0, uses_anonymous_args = 0
 1168              		@ link register save eliminated.
 1169              	.LVL72:
 785:./libraries/src/stm32f10x_can.c ****   {
 1170              		.loc 1 785 0
 1171 0000 B9B9     		cbnz	r1, .L99
 788:./libraries/src/stm32f10x_can.c **** 
 1172              		.loc 1 788 0
 1173 0002 0368     		ldr	r3, [r0]
 1174 0004 23F00303 		bic	r3, r3, #3
 1175 0008 43F00103 		orr	r3, r3, #1
 1176 000c 0360     		str	r3, [r0]
 779:./libraries/src/stm32f10x_can.c **** 
 1177              		.loc 1 779 0
 1178 000e 4FF6FF72 		movw	r2, #65535
 791:./libraries/src/stm32f10x_can.c ****     {
 1179              		.loc 1 791 0
 1180 0012 00E0     		b	.L100
 1181              	.LVL73:
 1182              	.L102:
 793:./libraries/src/stm32f10x_can.c ****     }
 1183              		.loc 1 793 0
 1184 0014 013A     		subs	r2, r2, #1
 1185              	.LVL74:
 1186              	.L100:
 791:./libraries/src/stm32f10x_can.c ****     {
 1187              		.loc 1 791 0
 1188 0016 4368     		ldr	r3, [r0, #4]
 1189 0018 03F00303 		and	r3, r3, #3
 1190 001c 012B     		cmp	r3, #1
 1191 001e 01D0     		beq	.L101
 791:./libraries/src/stm32f10x_can.c ****     {
 1192              		.loc 1 791 0 is_stmt 0 discriminator 1
 1193 0020 002A     		cmp	r2, #0
ARM GAS  /tmp/cc1CGZq2.s 			page 50


 1194 0022 F7D1     		bne	.L102
 1195              	.L101:
 795:./libraries/src/stm32f10x_can.c ****     {
 1196              		.loc 1 795 0 is_stmt 1
 1197 0024 4368     		ldr	r3, [r0, #4]
 1198 0026 03F00303 		and	r3, r3, #3
 1199 002a 012B     		cmp	r3, #1
 1200 002c 31D0     		beq	.L111
 797:./libraries/src/stm32f10x_can.c ****     }
 1201              		.loc 1 797 0
 1202 002e 0020     		movs	r0, #0
 1203              	.LVL75:
 1204 0030 7047     		bx	lr
 1205              	.LVL76:
 1206              	.L99:
 804:./libraries/src/stm32f10x_can.c ****   {
 1207              		.loc 1 804 0
 1208 0032 0129     		cmp	r1, #1
 1209 0034 13D1     		bne	.L104
 807:./libraries/src/stm32f10x_can.c **** 
 1210              		.loc 1 807 0
 1211 0036 0368     		ldr	r3, [r0]
 1212 0038 23F00303 		bic	r3, r3, #3
 1213 003c 0360     		str	r3, [r0]
 779:./libraries/src/stm32f10x_can.c **** 
 1214              		.loc 1 779 0
 1215 003e 4FF6FF73 		movw	r3, #65535
 810:./libraries/src/stm32f10x_can.c ****     {
 1216              		.loc 1 810 0
 1217 0042 00E0     		b	.L105
 1218              	.LVL77:
 1219              	.L107:
 812:./libraries/src/stm32f10x_can.c ****     }
 1220              		.loc 1 812 0
 1221 0044 013B     		subs	r3, r3, #1
 1222              	.LVL78:
 1223              	.L105:
 810:./libraries/src/stm32f10x_can.c ****     {
 1224              		.loc 1 810 0
 1225 0046 4268     		ldr	r2, [r0, #4]
 1226 0048 12F0030F 		tst	r2, #3
 1227 004c 01D0     		beq	.L106
 810:./libraries/src/stm32f10x_can.c ****     {
 1228              		.loc 1 810 0 is_stmt 0 discriminator 1
 1229 004e 002B     		cmp	r3, #0
 1230 0050 F8D1     		bne	.L107
 1231              	.L106:
 814:./libraries/src/stm32f10x_can.c ****     {
 1232              		.loc 1 814 0 is_stmt 1
 1233 0052 4368     		ldr	r3, [r0, #4]
 1234              	.LVL79:
 1235 0054 13F0030F 		tst	r3, #3
 1236 0058 1DD0     		beq	.L112
 816:./libraries/src/stm32f10x_can.c ****     }
 1237              		.loc 1 816 0
 1238 005a 0020     		movs	r0, #0
 1239              	.LVL80:
ARM GAS  /tmp/cc1CGZq2.s 			page 51


 1240 005c 7047     		bx	lr
 1241              	.LVL81:
 1242              	.L104:
 823:./libraries/src/stm32f10x_can.c ****   {
 1243              		.loc 1 823 0
 1244 005e 0229     		cmp	r1, #2
 1245 0060 1BD1     		bne	.L113
 826:./libraries/src/stm32f10x_can.c **** 
 1246              		.loc 1 826 0
 1247 0062 0368     		ldr	r3, [r0]
 1248 0064 23F00303 		bic	r3, r3, #3
 1249 0068 43F00203 		orr	r3, r3, #2
 1250 006c 0360     		str	r3, [r0]
 779:./libraries/src/stm32f10x_can.c **** 
 1251              		.loc 1 779 0
 1252 006e 4FF6FF72 		movw	r2, #65535
 829:./libraries/src/stm32f10x_can.c ****     {
 1253              		.loc 1 829 0
 1254 0072 00E0     		b	.L108
 1255              	.LVL82:
 1256              	.L110:
 831:./libraries/src/stm32f10x_can.c ****     }
 1257              		.loc 1 831 0
 1258 0074 013A     		subs	r2, r2, #1
 1259              	.LVL83:
 1260              	.L108:
 829:./libraries/src/stm32f10x_can.c ****     {
 1261              		.loc 1 829 0
 1262 0076 4368     		ldr	r3, [r0, #4]
 1263 0078 03F00303 		and	r3, r3, #3
 1264 007c 022B     		cmp	r3, #2
 1265 007e 01D0     		beq	.L109
 829:./libraries/src/stm32f10x_can.c ****     {
 1266              		.loc 1 829 0 is_stmt 0 discriminator 1
 1267 0080 002A     		cmp	r2, #0
 1268 0082 F7D1     		bne	.L110
 1269              	.L109:
 833:./libraries/src/stm32f10x_can.c ****     {
 1270              		.loc 1 833 0 is_stmt 1
 1271 0084 4368     		ldr	r3, [r0, #4]
 1272 0086 03F00303 		and	r3, r3, #3
 1273 008a 022B     		cmp	r3, #2
 1274 008c 07D0     		beq	.L114
 835:./libraries/src/stm32f10x_can.c ****     }
 1275              		.loc 1 835 0
 1276 008e 0020     		movs	r0, #0
 1277              	.LVL84:
 1278 0090 7047     		bx	lr
 1279              	.LVL85:
 1280              	.L111:
 801:./libraries/src/stm32f10x_can.c ****     }
 1281              		.loc 1 801 0
 1282 0092 0120     		movs	r0, #1
 1283              	.LVL86:
 1284 0094 7047     		bx	lr
 1285              	.LVL87:
 1286              	.L112:
ARM GAS  /tmp/cc1CGZq2.s 			page 52


 820:./libraries/src/stm32f10x_can.c ****     }
 1287              		.loc 1 820 0
 1288 0096 0120     		movs	r0, #1
 1289              	.LVL88:
 1290 0098 7047     		bx	lr
 1291              	.LVL89:
 1292              	.L113:
 844:./libraries/src/stm32f10x_can.c ****   }
 1293              		.loc 1 844 0
 1294 009a 0020     		movs	r0, #0
 1295              	.LVL90:
 1296 009c 7047     		bx	lr
 1297              	.LVL91:
 1298              	.L114:
 839:./libraries/src/stm32f10x_can.c ****     }
 1299              		.loc 1 839 0
 1300 009e 0120     		movs	r0, #1
 1301              	.LVL92:
 848:./libraries/src/stm32f10x_can.c **** 
 1302              		.loc 1 848 0
 1303 00a0 7047     		bx	lr
 1304              		.cfi_endproc
 1305              	.LFE42:
 1307 00a2 00BF     		.section	.text.CAN_Sleep,"ax",%progbits
 1308              		.align	2
 1309              		.global	CAN_Sleep
 1310              		.thumb
 1311              		.thumb_func
 1313              	CAN_Sleep:
 1314              	.LFB43:
 857:./libraries/src/stm32f10x_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1315              		.loc 1 857 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 0
 1318              		@ frame_needed = 0, uses_anonymous_args = 0
 1319              		@ link register save eliminated.
 1320              	.LVL93:
 864:./libraries/src/stm32f10x_can.c ****    
 1321              		.loc 1 864 0
 1322 0000 0368     		ldr	r3, [r0]
 1323 0002 23F00303 		bic	r3, r3, #3
 1324 0006 43F00203 		orr	r3, r3, #2
 1325 000a 0360     		str	r3, [r0]
 867:./libraries/src/stm32f10x_can.c ****   {
 1326              		.loc 1 867 0
 1327 000c 4368     		ldr	r3, [r0, #4]
 1328 000e 03F00303 		and	r3, r3, #3
 1329 0012 022B     		cmp	r3, #2
 1330 0014 01D0     		beq	.L117
 858:./libraries/src/stm32f10x_can.c ****   
 1331              		.loc 1 858 0
 1332 0016 0020     		movs	r0, #0
 1333              	.LVL94:
 1334 0018 7047     		bx	lr
 1335              	.LVL95:
 1336              	.L117:
 870:./libraries/src/stm32f10x_can.c ****   }
ARM GAS  /tmp/cc1CGZq2.s 			page 53


 1337              		.loc 1 870 0
 1338 001a 0120     		movs	r0, #1
 1339              	.LVL96:
 874:./libraries/src/stm32f10x_can.c **** 
 1340              		.loc 1 874 0
 1341 001c 7047     		bx	lr
 1342              		.cfi_endproc
 1343              	.LFE43:
 1345 001e 00BF     		.section	.text.CAN_WakeUp,"ax",%progbits
 1346              		.align	2
 1347              		.global	CAN_WakeUp
 1348              		.thumb
 1349              		.thumb_func
 1351              	CAN_WakeUp:
 1352              	.LFB44:
 883:./libraries/src/stm32f10x_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1353              		.loc 1 883 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 1357              		@ link register save eliminated.
 1358              	.LVL97:
 891:./libraries/src/stm32f10x_can.c ****     
 1359              		.loc 1 891 0
 1360 0000 0368     		ldr	r3, [r0]
 1361 0002 23F00203 		bic	r3, r3, #2
 1362 0006 0360     		str	r3, [r0]
 884:./libraries/src/stm32f10x_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1363              		.loc 1 884 0
 1364 0008 4FF6FF73 		movw	r3, #65535
 894:./libraries/src/stm32f10x_can.c ****   {
 1365              		.loc 1 894 0
 1366 000c 00E0     		b	.L119
 1367              	.LVL98:
 1368              	.L121:
 896:./libraries/src/stm32f10x_can.c ****   }
 1369              		.loc 1 896 0
 1370 000e 013B     		subs	r3, r3, #1
 1371              	.LVL99:
 1372              	.L119:
 894:./libraries/src/stm32f10x_can.c ****   {
 1373              		.loc 1 894 0
 1374 0010 4268     		ldr	r2, [r0, #4]
 1375 0012 12F0020F 		tst	r2, #2
 1376 0016 01D0     		beq	.L120
 894:./libraries/src/stm32f10x_can.c ****   {
 1377              		.loc 1 894 0 is_stmt 0 discriminator 1
 1378 0018 002B     		cmp	r3, #0
 1379 001a F8D1     		bne	.L121
 1380              	.L120:
 898:./libraries/src/stm32f10x_can.c ****   {
 1381              		.loc 1 898 0 is_stmt 1
 1382 001c 4368     		ldr	r3, [r0, #4]
 1383              	.LVL100:
 1384 001e 13F0020F 		tst	r3, #2
 1385 0022 01D0     		beq	.L123
 885:./libraries/src/stm32f10x_can.c ****   
ARM GAS  /tmp/cc1CGZq2.s 			page 54


 1386              		.loc 1 885 0
 1387 0024 0020     		movs	r0, #0
 1388              	.LVL101:
 1389 0026 7047     		bx	lr
 1390              	.LVL102:
 1391              	.L123:
 901:./libraries/src/stm32f10x_can.c ****   }
 1392              		.loc 1 901 0
 1393 0028 0120     		movs	r0, #1
 1394              	.LVL103:
 905:./libraries/src/stm32f10x_can.c **** 
 1395              		.loc 1 905 0
 1396 002a 7047     		bx	lr
 1397              		.cfi_endproc
 1398              	.LFE44:
 1400              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1401              		.align	2
 1402              		.global	CAN_GetLastErrorCode
 1403              		.thumb
 1404              		.thumb_func
 1406              	CAN_GetLastErrorCode:
 1407              	.LFB45:
 923:./libraries/src/stm32f10x_can.c ****   uint8_t errorcode=0;
 1408              		.loc 1 923 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 1412              		@ link register save eliminated.
 1413              	.LVL104:
 930:./libraries/src/stm32f10x_can.c ****   
 1414              		.loc 1 930 0
 1415 0000 8069     		ldr	r0, [r0, #24]
 1416              	.LVL105:
 934:./libraries/src/stm32f10x_can.c **** /**
 1417              		.loc 1 934 0
 1418 0002 00F07000 		and	r0, r0, #112
 1419              	.LVL106:
 1420 0006 7047     		bx	lr
 1421              		.cfi_endproc
 1422              	.LFE45:
 1424              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1425              		.align	2
 1426              		.global	CAN_GetReceiveErrorCounter
 1427              		.thumb
 1428              		.thumb_func
 1430              	CAN_GetReceiveErrorCounter:
 1431              	.LFB46:
 947:./libraries/src/stm32f10x_can.c ****   uint8_t counter=0;
 1432              		.loc 1 947 0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 0
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
 1436              		@ link register save eliminated.
 1437              	.LVL107:
 954:./libraries/src/stm32f10x_can.c ****   
 1438              		.loc 1 954 0
 1439 0000 8069     		ldr	r0, [r0, #24]
ARM GAS  /tmp/cc1CGZq2.s 			page 55


 1440              	.LVL108:
 958:./libraries/src/stm32f10x_can.c **** 
 1441              		.loc 1 958 0
 1442 0002 000E     		lsrs	r0, r0, #24
 1443              	.LVL109:
 1444 0004 7047     		bx	lr
 1445              		.cfi_endproc
 1446              	.LFE46:
 1448 0006 00BF     		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1449              		.align	2
 1450              		.global	CAN_GetLSBTransmitErrorCounter
 1451              		.thumb
 1452              		.thumb_func
 1454              	CAN_GetLSBTransmitErrorCounter:
 1455              	.LFB47:
 967:./libraries/src/stm32f10x_can.c ****   uint8_t counter=0;
 1456              		.loc 1 967 0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 1460              		@ link register save eliminated.
 1461              	.LVL110:
 974:./libraries/src/stm32f10x_can.c ****   
 1462              		.loc 1 974 0
 1463 0000 8069     		ldr	r0, [r0, #24]
 1464              	.LVL111:
 978:./libraries/src/stm32f10x_can.c **** 
 1465              		.loc 1 978 0
 1466 0002 C0F30740 		ubfx	r0, r0, #16, #8
 1467              	.LVL112:
 1468 0006 7047     		bx	lr
 1469              		.cfi_endproc
 1470              	.LFE47:
 1472              		.section	.text.CAN_ITConfig,"ax",%progbits
 1473              		.align	2
 1474              		.global	CAN_ITConfig
 1475              		.thumb
 1476              		.thumb_func
 1478              	CAN_ITConfig:
 1479              	.LFB48:
1004:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 1480              		.loc 1 1004 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 1485              	.LVL113:
1010:./libraries/src/stm32f10x_can.c ****   {
 1486              		.loc 1 1010 0
 1487 0000 1AB1     		cbz	r2, .L128
1013:./libraries/src/stm32f10x_can.c ****   }
 1488              		.loc 1 1013 0
 1489 0002 4369     		ldr	r3, [r0, #20]
 1490 0004 1943     		orrs	r1, r1, r3
 1491              	.LVL114:
 1492 0006 4161     		str	r1, [r0, #20]
 1493 0008 7047     		bx	lr
ARM GAS  /tmp/cc1CGZq2.s 			page 56


 1494              	.LVL115:
 1495              	.L128:
1018:./libraries/src/stm32f10x_can.c ****   }
 1496              		.loc 1 1018 0
 1497 000a 4369     		ldr	r3, [r0, #20]
 1498 000c 23EA0101 		bic	r1, r3, r1
 1499              	.LVL116:
 1500 0010 4161     		str	r1, [r0, #20]
 1501 0012 7047     		bx	lr
 1502              		.cfi_endproc
 1503              	.LFE48:
 1505              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1506              		.align	2
 1507              		.global	CAN_GetFlagStatus
 1508              		.thumb
 1509              		.thumb_func
 1511              	CAN_GetFlagStatus:
 1512              	.LFB49:
1044:./libraries/src/stm32f10x_can.c ****   FlagStatus bitstatus = RESET;
 1513              		.loc 1 1044 0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 0
 1516              		@ frame_needed = 0, uses_anonymous_args = 0
 1517              		@ link register save eliminated.
 1518              	.LVL117:
1052:./libraries/src/stm32f10x_can.c ****   { 
 1519              		.loc 1 1052 0
 1520 0000 11F4700F 		tst	r1, #15728640
 1521 0004 06D0     		beq	.L131
1055:./libraries/src/stm32f10x_can.c ****     { 
 1522              		.loc 1 1055 0
 1523 0006 8369     		ldr	r3, [r0, #24]
 1524 0008 1940     		ands	r1, r1, r3
 1525              	.LVL118:
 1526 000a C1F31301 		ubfx	r1, r1, #0, #20
 1527 000e 31B3     		cbz	r1, .L136
1058:./libraries/src/stm32f10x_can.c ****     }
 1528              		.loc 1 1058 0
 1529 0010 0120     		movs	r0, #1
 1530              	.LVL119:
 1531 0012 7047     		bx	lr
 1532              	.LVL120:
 1533              	.L131:
1066:./libraries/src/stm32f10x_can.c ****   { 
 1534              		.loc 1 1066 0
 1535 0014 11F0807F 		tst	r1, #16777216
 1536 0018 06D0     		beq	.L133
1069:./libraries/src/stm32f10x_can.c ****     { 
 1537              		.loc 1 1069 0
 1538 001a 4368     		ldr	r3, [r0, #4]
 1539 001c 1940     		ands	r1, r1, r3
 1540              	.LVL121:
 1541 001e C1F31301 		ubfx	r1, r1, #0, #20
 1542 0022 F1B1     		cbz	r1, .L137
1072:./libraries/src/stm32f10x_can.c ****     }
 1543              		.loc 1 1072 0
 1544 0024 0120     		movs	r0, #1
ARM GAS  /tmp/cc1CGZq2.s 			page 57


 1545              	.LVL122:
 1546 0026 7047     		bx	lr
 1547              	.LVL123:
 1548              	.L133:
1080:./libraries/src/stm32f10x_can.c ****   { 
 1549              		.loc 1 1080 0
 1550 0028 11F0006F 		tst	r1, #134217728
 1551 002c 06D0     		beq	.L134
1083:./libraries/src/stm32f10x_can.c ****     { 
 1552              		.loc 1 1083 0
 1553 002e 8368     		ldr	r3, [r0, #8]
 1554 0030 1940     		ands	r1, r1, r3
 1555              	.LVL124:
 1556 0032 C1F31301 		ubfx	r1, r1, #0, #20
 1557 0036 B1B1     		cbz	r1, .L138
1086:./libraries/src/stm32f10x_can.c ****     }
 1558              		.loc 1 1086 0
 1559 0038 0120     		movs	r0, #1
 1560              	.LVL125:
 1561 003a 7047     		bx	lr
 1562              	.LVL126:
 1563              	.L134:
1094:./libraries/src/stm32f10x_can.c ****   { 
 1564              		.loc 1 1094 0
 1565 003c 11F0007F 		tst	r1, #33554432
 1566 0040 06D0     		beq	.L135
1097:./libraries/src/stm32f10x_can.c ****     { 
 1567              		.loc 1 1097 0
 1568 0042 C368     		ldr	r3, [r0, #12]
 1569 0044 1940     		ands	r1, r1, r3
 1570              	.LVL127:
 1571 0046 C1F31301 		ubfx	r1, r1, #0, #20
 1572 004a 71B1     		cbz	r1, .L139
1100:./libraries/src/stm32f10x_can.c ****     }
 1573              		.loc 1 1100 0
 1574 004c 0120     		movs	r0, #1
 1575              	.LVL128:
 1576 004e 7047     		bx	lr
 1577              	.LVL129:
 1578              	.L135:
1111:./libraries/src/stm32f10x_can.c ****     { 
 1579              		.loc 1 1111 0
 1580 0050 0369     		ldr	r3, [r0, #16]
 1581 0052 1940     		ands	r1, r1, r3
 1582              	.LVL130:
 1583 0054 C1F31301 		ubfx	r1, r1, #0, #20
 1584 0058 49B1     		cbz	r1, .L140
1114:./libraries/src/stm32f10x_can.c ****     }
 1585              		.loc 1 1114 0
 1586 005a 0120     		movs	r0, #1
 1587              	.LVL131:
 1588 005c 7047     		bx	lr
 1589              	.LVL132:
 1590              	.L136:
1063:./libraries/src/stm32f10x_can.c ****     }
 1591              		.loc 1 1063 0
 1592 005e 0020     		movs	r0, #0
ARM GAS  /tmp/cc1CGZq2.s 			page 58


 1593              	.LVL133:
 1594 0060 7047     		bx	lr
 1595              	.LVL134:
 1596              	.L137:
1077:./libraries/src/stm32f10x_can.c ****     }
 1597              		.loc 1 1077 0
 1598 0062 0020     		movs	r0, #0
 1599              	.LVL135:
 1600 0064 7047     		bx	lr
 1601              	.LVL136:
 1602              	.L138:
1091:./libraries/src/stm32f10x_can.c ****     }
 1603              		.loc 1 1091 0
 1604 0066 0020     		movs	r0, #0
 1605              	.LVL137:
 1606 0068 7047     		bx	lr
 1607              	.LVL138:
 1608              	.L139:
1105:./libraries/src/stm32f10x_can.c ****     }
 1609              		.loc 1 1105 0
 1610 006a 0020     		movs	r0, #0
 1611              	.LVL139:
 1612 006c 7047     		bx	lr
 1613              	.LVL140:
 1614              	.L140:
1119:./libraries/src/stm32f10x_can.c ****     }
 1615              		.loc 1 1119 0
 1616 006e 0020     		movs	r0, #0
 1617              	.LVL141:
1124:./libraries/src/stm32f10x_can.c **** 
 1618              		.loc 1 1124 0
 1619 0070 7047     		bx	lr
 1620              		.cfi_endproc
 1621              	.LFE49:
 1623 0072 00BF     		.section	.text.CAN_ClearFlag,"ax",%progbits
 1624              		.align	2
 1625              		.global	CAN_ClearFlag
 1626              		.thumb
 1627              		.thumb_func
 1629              	CAN_ClearFlag:
 1630              	.LFB50:
1144:./libraries/src/stm32f10x_can.c ****   uint32_t flagtmp=0;
 1631              		.loc 1 1144 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              		@ link register save eliminated.
 1636              	.LVL142:
1150:./libraries/src/stm32f10x_can.c ****   {
 1637              		.loc 1 1150 0
 1638 0000 0C4B     		ldr	r3, .L147
 1639 0002 9942     		cmp	r1, r3
 1640 0004 02D1     		bne	.L142
1153:./libraries/src/stm32f10x_can.c ****   }
 1641              		.loc 1 1153 0
 1642 0006 0023     		movs	r3, #0
 1643 0008 8361     		str	r3, [r0, #24]
ARM GAS  /tmp/cc1CGZq2.s 			page 59


 1644 000a 7047     		bx	lr
 1645              	.L142:
1157:./libraries/src/stm32f10x_can.c **** 
 1646              		.loc 1 1157 0
 1647 000c C1F31303 		ubfx	r3, r1, #0, #20
 1648              	.LVL143:
1159:./libraries/src/stm32f10x_can.c ****     {
 1649              		.loc 1 1159 0
 1650 0010 11F0007F 		tst	r1, #33554432
 1651 0014 01D0     		beq	.L144
1162:./libraries/src/stm32f10x_can.c ****     }
 1652              		.loc 1 1162 0
 1653 0016 C360     		str	r3, [r0, #12]
 1654 0018 7047     		bx	lr
 1655              	.L144:
1164:./libraries/src/stm32f10x_can.c ****     {
 1656              		.loc 1 1164 0
 1657 001a 11F0806F 		tst	r1, #67108864
 1658 001e 01D0     		beq	.L145
1167:./libraries/src/stm32f10x_can.c ****     }
 1659              		.loc 1 1167 0
 1660 0020 0361     		str	r3, [r0, #16]
 1661 0022 7047     		bx	lr
 1662              	.L145:
1169:./libraries/src/stm32f10x_can.c ****     {
 1663              		.loc 1 1169 0
 1664 0024 11F0006F 		tst	r1, #134217728
 1665 0028 01D0     		beq	.L146
1172:./libraries/src/stm32f10x_can.c ****     }
 1666              		.loc 1 1172 0
 1667 002a 8360     		str	r3, [r0, #8]
 1668 002c 7047     		bx	lr
 1669              	.L146:
1177:./libraries/src/stm32f10x_can.c ****     }
 1670              		.loc 1 1177 0
 1671 002e 4360     		str	r3, [r0, #4]
 1672 0030 7047     		bx	lr
 1673              	.L148:
 1674 0032 00BF     		.align	2
 1675              	.L147:
 1676 0034 7000F030 		.word	821035120
 1677              		.cfi_endproc
 1678              	.LFE50:
 1680              		.section	.text.CAN_GetITStatus,"ax",%progbits
 1681              		.align	2
 1682              		.global	CAN_GetITStatus
 1683              		.thumb
 1684              		.thumb_func
 1686              	CAN_GetITStatus:
 1687              	.LFB51:
1204:./libraries/src/stm32f10x_can.c ****   ITStatus itstatus = RESET;
 1688              		.loc 1 1204 0
 1689              		.cfi_startproc
 1690              		@ args = 0, pretend = 0, frame = 0
 1691              		@ frame_needed = 0, uses_anonymous_args = 0
 1692              	.LVL144:
 1693 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc1CGZq2.s 			page 60


 1694              	.LCFI7:
 1695              		.cfi_def_cfa_offset 8
 1696              		.cfi_offset 3, -8
 1697              		.cfi_offset 14, -4
 1698              	.LVL145:
1211:./libraries/src/stm32f10x_can.c ****  {
 1699              		.loc 1 1211 0
 1700 0002 4369     		ldr	r3, [r0, #20]
 1701 0004 0B42     		tst	r3, r1
 1702 0006 6FD0     		beq	.L168
1214:./libraries/src/stm32f10x_can.c ****     {
 1703              		.loc 1 1214 0
 1704 0008 4029     		cmp	r1, #64
 1705 000a 45D0     		beq	.L151
 1706 000c 0ED8     		bhi	.L152
 1707 000e 0429     		cmp	r1, #4
 1708 0010 2ED0     		beq	.L153
 1709 0012 04D8     		bhi	.L154
 1710 0014 0129     		cmp	r1, #1
 1711 0016 21D0     		beq	.L155
 1712 0018 0229     		cmp	r1, #2
 1713 001a 24D0     		beq	.L156
 1714 001c 66E0     		b	.L169
 1715              	.L154:
 1716 001e 1029     		cmp	r1, #16
 1717 0020 30D0     		beq	.L157
 1718 0022 2029     		cmp	r1, #32
 1719 0024 33D0     		beq	.L158
 1720 0026 0829     		cmp	r1, #8
 1721 0028 60D1     		bne	.L169
 1722 002a 26E0     		b	.L159
 1723              	.L152:
 1724 002c B1F5006F 		cmp	r1, #2048
 1725 0030 50D0     		beq	.L160
 1726 0032 09D8     		bhi	.L161
 1727 0034 B1F5007F 		cmp	r1, #512
 1728 0038 42D0     		beq	.L162
 1729 003a B1F5806F 		cmp	r1, #1024
 1730 003e 44D0     		beq	.L163
 1731 0040 B1F5807F 		cmp	r1, #256
 1732 0044 52D1     		bne	.L169
 1733 0046 36E0     		b	.L164
 1734              	.L161:
 1735 0048 B1F5803F 		cmp	r1, #65536
 1736 004c 29D0     		beq	.L165
 1737 004e B1F5003F 		cmp	r1, #131072
 1738 0052 2BD0     		beq	.L166
 1739 0054 B1F5004F 		cmp	r1, #32768
 1740 0058 48D1     		bne	.L169
 1741 005a 40E0     		b	.L167
 1742              	.L155:
1218:./libraries/src/stm32f10x_can.c **** 	      break;
 1743              		.loc 1 1218 0
 1744 005c 8068     		ldr	r0, [r0, #8]
 1745              	.LVL146:
 1746 005e 2449     		ldr	r1, .L171
 1747              	.LVL147:
ARM GAS  /tmp/cc1CGZq2.s 			page 61


 1748 0060 FFF7FEFF 		bl	CheckITStatus
 1749              	.LVL148:
1219:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FMP0:
 1750              		.loc 1 1219 0
 1751 0064 08BD     		pop	{r3, pc}
 1752              	.LVL149:
 1753              	.L156:
1222:./libraries/src/stm32f10x_can.c **** 	      break;
 1754              		.loc 1 1222 0
 1755 0066 C068     		ldr	r0, [r0, #12]
 1756              	.LVL150:
 1757 0068 0321     		movs	r1, #3
 1758              	.LVL151:
 1759 006a FFF7FEFF 		bl	CheckITStatus
 1760              	.LVL152:
1223:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FF0:
 1761              		.loc 1 1223 0
 1762 006e 08BD     		pop	{r3, pc}
 1763              	.LVL153:
 1764              	.L153:
1226:./libraries/src/stm32f10x_can.c **** 	      break;
 1765              		.loc 1 1226 0
 1766 0070 C068     		ldr	r0, [r0, #12]
 1767              	.LVL154:
 1768 0072 0821     		movs	r1, #8
 1769              	.LVL155:
 1770 0074 FFF7FEFF 		bl	CheckITStatus
 1771              	.LVL156:
1227:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
 1772              		.loc 1 1227 0
 1773 0078 08BD     		pop	{r3, pc}
 1774              	.LVL157:
 1775              	.L159:
1230:./libraries/src/stm32f10x_can.c **** 	      break;
 1776              		.loc 1 1230 0
 1777 007a C068     		ldr	r0, [r0, #12]
 1778              	.LVL158:
 1779 007c 1021     		movs	r1, #16
 1780              	.LVL159:
 1781 007e FFF7FEFF 		bl	CheckITStatus
 1782              	.LVL160:
1231:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FMP1:
 1783              		.loc 1 1231 0
 1784 0082 08BD     		pop	{r3, pc}
 1785              	.LVL161:
 1786              	.L157:
1234:./libraries/src/stm32f10x_can.c **** 	      break;
 1787              		.loc 1 1234 0
 1788 0084 0069     		ldr	r0, [r0, #16]
 1789              	.LVL162:
 1790 0086 0321     		movs	r1, #3
 1791              	.LVL163:
 1792 0088 FFF7FEFF 		bl	CheckITStatus
 1793              	.LVL164:
1235:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FF1:
 1794              		.loc 1 1235 0
 1795 008c 08BD     		pop	{r3, pc}
ARM GAS  /tmp/cc1CGZq2.s 			page 62


 1796              	.LVL165:
 1797              	.L158:
1238:./libraries/src/stm32f10x_can.c **** 	      break;
 1798              		.loc 1 1238 0
 1799 008e 0069     		ldr	r0, [r0, #16]
 1800              	.LVL166:
 1801 0090 0821     		movs	r1, #8
 1802              	.LVL167:
 1803 0092 FFF7FEFF 		bl	CheckITStatus
 1804              	.LVL168:
1239:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
 1805              		.loc 1 1239 0
 1806 0096 08BD     		pop	{r3, pc}
 1807              	.LVL169:
 1808              	.L151:
1242:./libraries/src/stm32f10x_can.c **** 	      break;
 1809              		.loc 1 1242 0
 1810 0098 0069     		ldr	r0, [r0, #16]
 1811              	.LVL170:
 1812 009a 1021     		movs	r1, #16
 1813              	.LVL171:
 1814 009c FFF7FEFF 		bl	CheckITStatus
 1815              	.LVL172:
1243:./libraries/src/stm32f10x_can.c ****       case CAN_IT_WKU:
 1816              		.loc 1 1243 0
 1817 00a0 08BD     		pop	{r3, pc}
 1818              	.LVL173:
 1819              	.L165:
1246:./libraries/src/stm32f10x_can.c **** 	      break;
 1820              		.loc 1 1246 0
 1821 00a2 4068     		ldr	r0, [r0, #4]
 1822              	.LVL174:
 1823 00a4 0821     		movs	r1, #8
 1824              	.LVL175:
 1825 00a6 FFF7FEFF 		bl	CheckITStatus
 1826              	.LVL176:
1247:./libraries/src/stm32f10x_can.c ****       case CAN_IT_SLK:
 1827              		.loc 1 1247 0
 1828 00aa 08BD     		pop	{r3, pc}
 1829              	.LVL177:
 1830              	.L166:
1250:./libraries/src/stm32f10x_can.c **** 	      break;
 1831              		.loc 1 1250 0
 1832 00ac 4068     		ldr	r0, [r0, #4]
 1833              	.LVL178:
 1834 00ae 1021     		movs	r1, #16
 1835              	.LVL179:
 1836 00b0 FFF7FEFF 		bl	CheckITStatus
 1837              	.LVL180:
1251:./libraries/src/stm32f10x_can.c ****       case CAN_IT_EWG:
 1838              		.loc 1 1251 0
 1839 00b4 08BD     		pop	{r3, pc}
 1840              	.LVL181:
 1841              	.L164:
1254:./libraries/src/stm32f10x_can.c **** 	      break;
 1842              		.loc 1 1254 0
 1843 00b6 8069     		ldr	r0, [r0, #24]
ARM GAS  /tmp/cc1CGZq2.s 			page 63


 1844              	.LVL182:
 1845 00b8 0121     		movs	r1, #1
 1846              	.LVL183:
 1847 00ba FFF7FEFF 		bl	CheckITStatus
 1848              	.LVL184:
1255:./libraries/src/stm32f10x_can.c ****       case CAN_IT_EPV:
 1849              		.loc 1 1255 0
 1850 00be 08BD     		pop	{r3, pc}
 1851              	.LVL185:
 1852              	.L162:
1258:./libraries/src/stm32f10x_can.c **** 	      break;
 1853              		.loc 1 1258 0
 1854 00c0 8069     		ldr	r0, [r0, #24]
 1855              	.LVL186:
 1856 00c2 0221     		movs	r1, #2
 1857              	.LVL187:
 1858 00c4 FFF7FEFF 		bl	CheckITStatus
 1859              	.LVL188:
1259:./libraries/src/stm32f10x_can.c ****       case CAN_IT_BOF:
 1860              		.loc 1 1259 0
 1861 00c8 08BD     		pop	{r3, pc}
 1862              	.LVL189:
 1863              	.L163:
1262:./libraries/src/stm32f10x_can.c **** 	      break;
 1864              		.loc 1 1262 0
 1865 00ca 8069     		ldr	r0, [r0, #24]
 1866              	.LVL190:
 1867 00cc 0421     		movs	r1, #4
 1868              	.LVL191:
 1869 00ce FFF7FEFF 		bl	CheckITStatus
 1870              	.LVL192:
1263:./libraries/src/stm32f10x_can.c ****       case CAN_IT_LEC:
 1871              		.loc 1 1263 0
 1872 00d2 08BD     		pop	{r3, pc}
 1873              	.LVL193:
 1874              	.L160:
1266:./libraries/src/stm32f10x_can.c **** 	      break;
 1875              		.loc 1 1266 0
 1876 00d4 8069     		ldr	r0, [r0, #24]
 1877              	.LVL194:
 1878 00d6 7021     		movs	r1, #112
 1879              	.LVL195:
 1880 00d8 FFF7FEFF 		bl	CheckITStatus
 1881              	.LVL196:
1267:./libraries/src/stm32f10x_can.c ****       case CAN_IT_ERR:
 1882              		.loc 1 1267 0
 1883 00dc 08BD     		pop	{r3, pc}
 1884              	.LVL197:
 1885              	.L167:
1270:./libraries/src/stm32f10x_can.c **** 	      break;
 1886              		.loc 1 1270 0
 1887 00de 4068     		ldr	r0, [r0, #4]
 1888              	.LVL198:
 1889 00e0 0421     		movs	r1, #4
 1890              	.LVL199:
 1891 00e2 FFF7FEFF 		bl	CheckITStatus
 1892              	.LVL200:
ARM GAS  /tmp/cc1CGZq2.s 			page 64


1271:./libraries/src/stm32f10x_can.c ****       default :
 1893              		.loc 1 1271 0
 1894 00e6 08BD     		pop	{r3, pc}
 1895              	.LVL201:
 1896              	.L168:
1281:./libraries/src/stm32f10x_can.c ****   }
 1897              		.loc 1 1281 0
 1898 00e8 0020     		movs	r0, #0
 1899              	.LVL202:
 1900 00ea 08BD     		pop	{r3, pc}
 1901              	.LVL203:
 1902              	.L169:
1274:./libraries/src/stm32f10x_can.c ****               break;
 1903              		.loc 1 1274 0
 1904 00ec 0020     		movs	r0, #0
 1905              	.LVL204:
1286:./libraries/src/stm32f10x_can.c **** 
 1906              		.loc 1 1286 0
 1907 00ee 08BD     		pop	{r3, pc}
 1908              	.L172:
 1909              		.align	2
 1910              	.L171:
 1911 00f0 01010100 		.word	65793
 1912              		.cfi_endproc
 1913              	.LFE51:
 1915              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 1916              		.align	2
 1917              		.global	CAN_ClearITPendingBit
 1918              		.thumb
 1919              		.thumb_func
 1921              	CAN_ClearITPendingBit:
 1922              	.LFB52:
1307:./libraries/src/stm32f10x_can.c ****   /* Check the parameters */
 1923              		.loc 1 1307 0
 1924              		.cfi_startproc
 1925              		@ args = 0, pretend = 0, frame = 0
 1926              		@ frame_needed = 0, uses_anonymous_args = 0
 1927              		@ link register save eliminated.
 1928              	.LVL205:
1312:./libraries/src/stm32f10x_can.c ****   {
 1929              		.loc 1 1312 0
 1930 0000 B1F5807F 		cmp	r1, #256
 1931 0004 37D0     		beq	.L175
 1932 0006 0CD8     		bhi	.L176
 1933 0008 0829     		cmp	r1, #8
 1934 000a 25D0     		beq	.L177
 1935 000c 04D8     		bhi	.L178
 1936 000e 0129     		cmp	r1, #1
 1937 0010 1CD0     		beq	.L179
 1938 0012 0429     		cmp	r1, #4
 1939 0014 1DD0     		beq	.L180
 1940 0016 7047     		bx	lr
 1941              	.L178:
 1942 0018 2029     		cmp	r1, #32
 1943 001a 20D0     		beq	.L181
 1944 001c 4029     		cmp	r1, #64
 1945 001e 21D0     		beq	.L182
ARM GAS  /tmp/cc1CGZq2.s 			page 65


 1946 0020 7047     		bx	lr
 1947              	.L176:
 1948 0022 B1F5006F 		cmp	r1, #2048
 1949 0026 2FD0     		beq	.L183
 1950 0028 06D8     		bhi	.L184
 1951 002a B1F5007F 		cmp	r1, #512
 1952 002e 25D0     		beq	.L185
 1953 0030 B1F5806F 		cmp	r1, #1024
 1954 0034 25D0     		beq	.L186
 1955 0036 7047     		bx	lr
 1956              	.L184:
 1957 0038 B1F5803F 		cmp	r1, #65536
 1958 003c 15D0     		beq	.L187
 1959 003e B1F5003F 		cmp	r1, #131072
 1960 0042 15D0     		beq	.L188
 1961 0044 B1F5004F 		cmp	r1, #32768
 1962 0048 27D1     		bne	.L173
 1963 004a 22E0     		b	.L189
 1964              	.L179:
1316:./libraries/src/stm32f10x_can.c **** 	      break;
 1965              		.loc 1 1316 0
 1966 004c 134B     		ldr	r3, .L190
 1967 004e 8360     		str	r3, [r0, #8]
1317:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FF0:
 1968              		.loc 1 1317 0
 1969 0050 7047     		bx	lr
 1970              	.L180:
1320:./libraries/src/stm32f10x_can.c **** 	      break;
 1971              		.loc 1 1320 0
 1972 0052 0823     		movs	r3, #8
 1973 0054 C360     		str	r3, [r0, #12]
1321:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
 1974              		.loc 1 1321 0
 1975 0056 7047     		bx	lr
 1976              	.L177:
1324:./libraries/src/stm32f10x_can.c **** 	      break;
 1977              		.loc 1 1324 0
 1978 0058 1023     		movs	r3, #16
 1979 005a C360     		str	r3, [r0, #12]
1325:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FF1:
 1980              		.loc 1 1325 0
 1981 005c 7047     		bx	lr
 1982              	.L181:
1328:./libraries/src/stm32f10x_can.c **** 	      break;
 1983              		.loc 1 1328 0
 1984 005e 0823     		movs	r3, #8
 1985 0060 0361     		str	r3, [r0, #16]
1329:./libraries/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
 1986              		.loc 1 1329 0
 1987 0062 7047     		bx	lr
 1988              	.L182:
1332:./libraries/src/stm32f10x_can.c **** 	      break;
 1989              		.loc 1 1332 0
 1990 0064 1023     		movs	r3, #16
 1991 0066 0361     		str	r3, [r0, #16]
1333:./libraries/src/stm32f10x_can.c ****       case CAN_IT_WKU:
 1992              		.loc 1 1333 0
ARM GAS  /tmp/cc1CGZq2.s 			page 66


 1993 0068 7047     		bx	lr
 1994              	.L187:
1336:./libraries/src/stm32f10x_can.c **** 	      break;
 1995              		.loc 1 1336 0
 1996 006a 0823     		movs	r3, #8
 1997 006c 4360     		str	r3, [r0, #4]
1337:./libraries/src/stm32f10x_can.c ****       case CAN_IT_SLK:
 1998              		.loc 1 1337 0
 1999 006e 7047     		bx	lr
 2000              	.L188:
1340:./libraries/src/stm32f10x_can.c **** 	      break;
 2001              		.loc 1 1340 0
 2002 0070 1023     		movs	r3, #16
 2003 0072 4360     		str	r3, [r0, #4]
1341:./libraries/src/stm32f10x_can.c ****       case CAN_IT_EWG:
 2004              		.loc 1 1341 0
 2005 0074 7047     		bx	lr
 2006              	.L175:
1344:./libraries/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2007              		.loc 1 1344 0
 2008 0076 0423     		movs	r3, #4
 2009 0078 4360     		str	r3, [r0, #4]
1347:./libraries/src/stm32f10x_can.c ****       case CAN_IT_EPV:
 2010              		.loc 1 1347 0
 2011 007a 7047     		bx	lr
 2012              	.L185:
1350:./libraries/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2013              		.loc 1 1350 0
 2014 007c 0423     		movs	r3, #4
 2015 007e 4360     		str	r3, [r0, #4]
1353:./libraries/src/stm32f10x_can.c ****       case CAN_IT_BOF:
 2016              		.loc 1 1353 0
 2017 0080 7047     		bx	lr
 2018              	.L186:
1356:./libraries/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2019              		.loc 1 1356 0
 2020 0082 0423     		movs	r3, #4
 2021 0084 4360     		str	r3, [r0, #4]
1359:./libraries/src/stm32f10x_can.c ****       case CAN_IT_LEC:
 2022              		.loc 1 1359 0
 2023 0086 7047     		bx	lr
 2024              	.L183:
1362:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
 2025              		.loc 1 1362 0
 2026 0088 0023     		movs	r3, #0
 2027 008a 8361     		str	r3, [r0, #24]
1364:./libraries/src/stm32f10x_can.c **** 	      break;
 2028              		.loc 1 1364 0
 2029 008c 0423     		movs	r3, #4
 2030 008e 4360     		str	r3, [r0, #4]
1365:./libraries/src/stm32f10x_can.c ****       case CAN_IT_ERR:
 2031              		.loc 1 1365 0
 2032 0090 7047     		bx	lr
 2033              	.L189:
1368:./libraries/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
 2034              		.loc 1 1368 0
 2035 0092 0023     		movs	r3, #0
ARM GAS  /tmp/cc1CGZq2.s 			page 67


 2036 0094 8361     		str	r3, [r0, #24]
1370:./libraries/src/stm32f10x_can.c **** 	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
 2037              		.loc 1 1370 0
 2038 0096 0423     		movs	r3, #4
 2039 0098 4360     		str	r3, [r0, #4]
 2040              	.L173:
 2041 009a 7047     		bx	lr
 2042              	.L191:
 2043              		.align	2
 2044              	.L190:
 2045 009c 01010100 		.word	65793
 2046              		.cfi_endproc
 2047              	.LFE52:
 2049              		.text
 2050              	.Letext0:
 2051              		.file 2 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 2052              		.file 3 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 2053              		.file 4 "cmsis/stm32f10x.h"
 2054              		.file 5 "libraries/inc/stm32f10x_can.h"
 2055              		.file 6 "cmsis/core_cm3.h"
 2056              		.file 7 "libraries/inc/stm32f10x_rcc.h"
ARM GAS  /tmp/cc1CGZq2.s 			page 68


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_can.c
     /tmp/cc1CGZq2.s:20     .text.CheckITStatus:00000000 $t
     /tmp/cc1CGZq2.s:24     .text.CheckITStatus:00000000 CheckITStatus
     /tmp/cc1CGZq2.s:51     .text.CAN_DeInit:00000000 $t
     /tmp/cc1CGZq2.s:56     .text.CAN_DeInit:00000000 CAN_DeInit
     /tmp/cc1CGZq2.s:101    .text.CAN_DeInit:00000034 $d
     /tmp/cc1CGZq2.s:106    .text.CAN_Init:00000000 $t
     /tmp/cc1CGZq2.s:111    .text.CAN_Init:00000000 CAN_Init
     /tmp/cc1CGZq2.s:313    .text.CAN_FilterInit:00000000 $t
     /tmp/cc1CGZq2.s:318    .text.CAN_FilterInit:00000000 CAN_FilterInit
     /tmp/cc1CGZq2.s:475    .text.CAN_FilterInit:000000f0 $d
     /tmp/cc1CGZq2.s:480    .text.CAN_StructInit:00000000 $t
     /tmp/cc1CGZq2.s:485    .text.CAN_StructInit:00000000 CAN_StructInit
     /tmp/cc1CGZq2.s:524    .text.CAN_SlaveStartBank:00000000 $t
     /tmp/cc1CGZq2.s:529    .text.CAN_SlaveStartBank:00000000 CAN_SlaveStartBank
     /tmp/cc1CGZq2.s:560    .text.CAN_SlaveStartBank:00000038 $d
     /tmp/cc1CGZq2.s:565    .text.CAN_DBGFreeze:00000000 $t
     /tmp/cc1CGZq2.s:570    .text.CAN_DBGFreeze:00000000 CAN_DBGFreeze
     /tmp/cc1CGZq2.s:595    .text.CAN_TTComModeCmd:00000000 $t
     /tmp/cc1CGZq2.s:600    .text.CAN_TTComModeCmd:00000000 CAN_TTComModeCmd
     /tmp/cc1CGZq2.s:649    .text.CAN_Transmit:00000000 $t
     /tmp/cc1CGZq2.s:654    .text.CAN_Transmit:00000000 CAN_Transmit
     /tmp/cc1CGZq2.s:816    .text.CAN_TransmitStatus:00000000 $t
     /tmp/cc1CGZq2.s:821    .text.CAN_TransmitStatus:00000000 CAN_TransmitStatus
     /tmp/cc1CGZq2.s:923    .text.CAN_TransmitStatus:00000068 $d
     /tmp/cc1CGZq2.s:930    .text.CAN_CancelTransmit:00000000 $t
     /tmp/cc1CGZq2.s:935    .text.CAN_CancelTransmit:00000000 CAN_CancelTransmit
     /tmp/cc1CGZq2.s:974    .text.CAN_Receive:00000000 $t
     /tmp/cc1CGZq2.s:979    .text.CAN_Receive:00000000 CAN_Receive
     /tmp/cc1CGZq2.s:1084   .text.CAN_FIFORelease:00000000 $t
     /tmp/cc1CGZq2.s:1089   .text.CAN_FIFORelease:00000000 CAN_FIFORelease
     /tmp/cc1CGZq2.s:1114   .text.CAN_MessagePending:00000000 $t
     /tmp/cc1CGZq2.s:1119   .text.CAN_MessagePending:00000000 CAN_MessagePending
     /tmp/cc1CGZq2.s:1157   .text.CAN_OperatingModeRequest:00000000 $t
     /tmp/cc1CGZq2.s:1162   .text.CAN_OperatingModeRequest:00000000 CAN_OperatingModeRequest
     /tmp/cc1CGZq2.s:1308   .text.CAN_Sleep:00000000 $t
     /tmp/cc1CGZq2.s:1313   .text.CAN_Sleep:00000000 CAN_Sleep
     /tmp/cc1CGZq2.s:1346   .text.CAN_WakeUp:00000000 $t
     /tmp/cc1CGZq2.s:1351   .text.CAN_WakeUp:00000000 CAN_WakeUp
     /tmp/cc1CGZq2.s:1401   .text.CAN_GetLastErrorCode:00000000 $t
     /tmp/cc1CGZq2.s:1406   .text.CAN_GetLastErrorCode:00000000 CAN_GetLastErrorCode
     /tmp/cc1CGZq2.s:1425   .text.CAN_GetReceiveErrorCounter:00000000 $t
     /tmp/cc1CGZq2.s:1430   .text.CAN_GetReceiveErrorCounter:00000000 CAN_GetReceiveErrorCounter
     /tmp/cc1CGZq2.s:1449   .text.CAN_GetLSBTransmitErrorCounter:00000000 $t
     /tmp/cc1CGZq2.s:1454   .text.CAN_GetLSBTransmitErrorCounter:00000000 CAN_GetLSBTransmitErrorCounter
     /tmp/cc1CGZq2.s:1473   .text.CAN_ITConfig:00000000 $t
     /tmp/cc1CGZq2.s:1478   .text.CAN_ITConfig:00000000 CAN_ITConfig
     /tmp/cc1CGZq2.s:1506   .text.CAN_GetFlagStatus:00000000 $t
     /tmp/cc1CGZq2.s:1511   .text.CAN_GetFlagStatus:00000000 CAN_GetFlagStatus
     /tmp/cc1CGZq2.s:1624   .text.CAN_ClearFlag:00000000 $t
     /tmp/cc1CGZq2.s:1629   .text.CAN_ClearFlag:00000000 CAN_ClearFlag
     /tmp/cc1CGZq2.s:1676   .text.CAN_ClearFlag:00000034 $d
     /tmp/cc1CGZq2.s:1681   .text.CAN_GetITStatus:00000000 $t
     /tmp/cc1CGZq2.s:1686   .text.CAN_GetITStatus:00000000 CAN_GetITStatus
     /tmp/cc1CGZq2.s:1911   .text.CAN_GetITStatus:000000f0 $d
     /tmp/cc1CGZq2.s:1916   .text.CAN_ClearITPendingBit:00000000 $t
ARM GAS  /tmp/cc1CGZq2.s 			page 69


     /tmp/cc1CGZq2.s:1921   .text.CAN_ClearITPendingBit:00000000 CAN_ClearITPendingBit
     /tmp/cc1CGZq2.s:2045   .text.CAN_ClearITPendingBit:0000009c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
