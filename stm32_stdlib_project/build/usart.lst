ARM GAS  /tmp/ccp705Ch.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"usart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USART1_GPIO_Config,"ax",%progbits
  20              		.align	2
  21              		.global	USART1_GPIO_Config
  22              		.thumb
  23              		.thumb_func
  25              	USART1_GPIO_Config:
  26              	.LFB30:
  27              		.file 1 "./module/src/usart.c"
   1:./module/src/usart.c **** #include "usart.h"
   2:./module/src/usart.c **** #include "stm32f10x_usart.h"
   3:./module/src/usart.c **** /* 串口相关定义 */
   4:./module/src/usart.c **** u8 USART1_RX_FLAG=0;
   5:./module/src/usart.c **** u8 USART1_RX_BUFF[USART1_RX_SIZE];
   6:./module/src/usart.c **** u32 USART1_RX_COUNT=0;
   7:./module/src/usart.c **** 
   8:./module/src/usart.c **** u8 USART2_RX_FLAG=0;
   9:./module/src/usart.c **** u8 USART2_RX_BUFF[USART2_RX_SIZE];
  10:./module/src/usart.c **** u32 USART2_RX_COUNT=0;
  11:./module/src/usart.c **** 
  12:./module/src/usart.c **** u8 USART3_RX_FLAG=0;
  13:./module/src/usart.c **** u8 USART3_RX_BUFF[USART3_RX_SIZE];
  14:./module/src/usart.c **** u32 USART3_RX_COUNT=0;
  15:./module/src/usart.c **** /*
  16:./module/src/usart.c **** 函数功能: 串口1、2、3的初始化
  17:./module/src/usart.c **** 函数参数: 
  18:./module/src/usart.c **** 	USART_TypeDef *USARTx  :串口指针。 USART1\USART2\USART3
  19:./module/src/usart.c **** 	u32 baud  : 波特率
  20:./module/src/usart.c **** 串口1硬件连接:
  21:./module/src/usart.c **** 	TX-PA9   复用推挽输出 0xB
  22:./module/src/usart.c **** 	RX-PA10  上下拉输入   0x8
  23:./module/src/usart.c **** 串口2硬件连接:
  24:./module/src/usart.c **** 	TX-PA2   复用推挽输出 0xB
  25:./module/src/usart.c **** 	RX-PA3   上下拉输入   0x8
  26:./module/src/usart.c **** 串口3硬件连接:
  27:./module/src/usart.c **** 	TX-PB10   复用推挽输出 0xB
  28:./module/src/usart.c **** 	RX-PB11   上下拉输入   0x8		
  29:./module/src/usart.c **** */
  30:./module/src/usart.c **** void USART1_GPIO_Config()
  31:./module/src/usart.c **** {
ARM GAS  /tmp/ccp705Ch.s 			page 2


  28              		.loc 1 31 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  32:./module/src/usart.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
  33:./module/src/usart.c **** 
  34:./module/src/usart.c **** 	/* 使能 USART1 时钟*/
  35:./module/src/usart.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA, ENABLE); 
  40              		.loc 1 35 0
  41 0004 0121     		movs	r1, #1
  42 0006 44F20400 		movw	r0, #16388
  43 000a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  44              	.LVL0:
  36:./module/src/usart.c **** 
  37:./module/src/usart.c **** 	/* USART1 使用IO端口配置 */    
  38:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  45              		.loc 1 38 0
  46 000e 4FF40073 		mov	r3, #512
  47 0012 ADF80430 		strh	r3, [sp, #4]	@ movhi
  39:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //复用推挽输出
  48              		.loc 1 39 0
  49 0016 1823     		movs	r3, #24
  50 0018 8DF80730 		strb	r3, [sp, #7]
  40:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  51              		.loc 1 40 0
  52 001c 0323     		movs	r3, #3
  53 001e 8DF80630 		strb	r3, [sp, #6]
  41:./module/src/usart.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);    
  54              		.loc 1 41 0
  55 0022 094C     		ldr	r4, .L3
  56 0024 01A9     		add	r1, sp, #4
  57 0026 2046     		mov	r0, r4
  58 0028 FFF7FEFF 		bl	GPIO_Init
  59              	.LVL1:
  42:./module/src/usart.c **** 
  43:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
  60              		.loc 1 43 0
  61 002c 4FF48063 		mov	r3, #1024
  62 0030 ADF80430 		strh	r3, [sp, #4]	@ movhi
  44:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	//浮空输入
  63              		.loc 1 44 0
  64 0034 0423     		movs	r3, #4
  65 0036 8DF80730 		strb	r3, [sp, #7]
  45:./module/src/usart.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);   //初始化GPIOA
  66              		.loc 1 45 0
  67 003a 0DEB0301 		add	r1, sp, r3
  68 003e 2046     		mov	r0, r4
  69 0040 FFF7FEFF 		bl	GPIO_Init
  70              	.LVL2:
ARM GAS  /tmp/ccp705Ch.s 			page 3


  46:./module/src/usart.c **** }
  71              		.loc 1 46 0
  72 0044 02B0     		add	sp, sp, #8
  73              	.LCFI2:
  74              		.cfi_def_cfa_offset 8
  75              		@ sp needed
  76 0046 10BD     		pop	{r4, pc}
  77              	.L4:
  78              		.align	2
  79              	.L3:
  80 0048 00080140 		.word	1073809408
  81              		.cfi_endproc
  82              	.LFE30:
  84              		.section	.text.USART2_GPIO_Config,"ax",%progbits
  85              		.align	2
  86              		.global	USART2_GPIO_Config
  87              		.thumb
  88              		.thumb_func
  90              	USART2_GPIO_Config:
  91              	.LFB31:
  47:./module/src/usart.c **** void USART2_GPIO_Config()
  48:./module/src/usart.c **** {
  92              		.loc 1 48 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 8
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96 0000 30B5     		push	{r4, r5, lr}
  97              	.LCFI3:
  98              		.cfi_def_cfa_offset 12
  99              		.cfi_offset 4, -12
 100              		.cfi_offset 5, -8
 101              		.cfi_offset 14, -4
 102 0002 83B0     		sub	sp, sp, #12
 103              	.LCFI4:
 104              		.cfi_def_cfa_offset 24
  49:./module/src/usart.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
  50:./module/src/usart.c **** 
  51:./module/src/usart.c **** 	/* 使能 USART1 时钟*/
  52:./module/src/usart.c **** 	RCC_APB2PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB2Periph_GPIOA, ENABLE); 
 105              		.loc 1 52 0
 106 0004 0121     		movs	r1, #1
 107 0006 0F48     		ldr	r0, .L7
 108 0008 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 109              	.LVL3:
  53:./module/src/usart.c **** 
  54:./module/src/usart.c **** 	/* USART1 使用IO端口配置 */    
  55:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 110              		.loc 1 55 0
 111 000c 0425     		movs	r5, #4
 112 000e ADF80450 		strh	r5, [sp, #4]	@ movhi
  56:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //复用推挽输出
 113              		.loc 1 56 0
 114 0012 1823     		movs	r3, #24
 115 0014 8DF80730 		strb	r3, [sp, #7]
  57:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 116              		.loc 1 57 0
 117 0018 0323     		movs	r3, #3
ARM GAS  /tmp/ccp705Ch.s 			page 4


 118 001a 8DF80630 		strb	r3, [sp, #6]
  58:./module/src/usart.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);    
 119              		.loc 1 58 0
 120 001e 0A4C     		ldr	r4, .L7+4
 121 0020 0DEB0501 		add	r1, sp, r5
 122 0024 2046     		mov	r0, r4
 123 0026 FFF7FEFF 		bl	GPIO_Init
 124              	.LVL4:
  59:./module/src/usart.c **** 
  60:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 125              		.loc 1 60 0
 126 002a 0823     		movs	r3, #8
 127 002c ADF80430 		strh	r3, [sp, #4]	@ movhi
  61:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	//浮空输入
 128              		.loc 1 61 0
 129 0030 8DF80750 		strb	r5, [sp, #7]
  62:./module/src/usart.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);   //初始化GPIOA
 130              		.loc 1 62 0
 131 0034 0DEB0501 		add	r1, sp, r5
 132 0038 2046     		mov	r0, r4
 133 003a FFF7FEFF 		bl	GPIO_Init
 134              	.LVL5:
  63:./module/src/usart.c **** }
 135              		.loc 1 63 0
 136 003e 03B0     		add	sp, sp, #12
 137              	.LCFI5:
 138              		.cfi_def_cfa_offset 12
 139              		@ sp needed
 140 0040 30BD     		pop	{r4, r5, pc}
 141              	.L8:
 142 0042 00BF     		.align	2
 143              	.L7:
 144 0044 04000200 		.word	131076
 145 0048 00080140 		.word	1073809408
 146              		.cfi_endproc
 147              	.LFE31:
 149              		.section	.text.USART3_GPIO_Config,"ax",%progbits
 150              		.align	2
 151              		.global	USART3_GPIO_Config
 152              		.thumb
 153              		.thumb_func
 155              	USART3_GPIO_Config:
 156              	.LFB32:
  64:./module/src/usart.c **** void USART3_GPIO_Config()
  65:./module/src/usart.c **** {
 157              		.loc 1 65 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 8
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161 0000 00B5     		push	{lr}
 162              	.LCFI6:
 163              		.cfi_def_cfa_offset 4
 164              		.cfi_offset 14, -4
 165 0002 83B0     		sub	sp, sp, #12
 166              	.LCFI7:
 167              		.cfi_def_cfa_offset 16
  66:./module/src/usart.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
ARM GAS  /tmp/ccp705Ch.s 			page 5


  67:./module/src/usart.c **** 
  68:./module/src/usart.c **** 	/* 使能 USART1 时钟*/
  69:./module/src/usart.c **** 	RCC_APB2PeriphClockCmd(RCC_APB1Periph_USART3 | RCC_APB2Periph_GPIOB, ENABLE); 
 168              		.loc 1 69 0
 169 0004 0121     		movs	r1, #1
 170 0006 1048     		ldr	r0, .L11
 171 0008 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 172              	.LVL6:
  70:./module/src/usart.c **** 
  71:./module/src/usart.c **** 	/* USART1 使用IO端口配置 */    
  72:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 173              		.loc 1 72 0
 174 000c 4FF48063 		mov	r3, #1024
 175 0010 ADF80430 		strh	r3, [sp, #4]	@ movhi
  73:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //复用推挽输出
 176              		.loc 1 73 0
 177 0014 1823     		movs	r3, #24
 178 0016 8DF80730 		strb	r3, [sp, #7]
  74:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 179              		.loc 1 74 0
 180 001a 0323     		movs	r3, #3
 181 001c 8DF80630 		strb	r3, [sp, #6]
  75:./module/src/usart.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);    
 182              		.loc 1 75 0
 183 0020 01A9     		add	r1, sp, #4
 184 0022 0A48     		ldr	r0, .L11+4
 185 0024 FFF7FEFF 		bl	GPIO_Init
 186              	.LVL7:
  76:./module/src/usart.c **** 
  77:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 187              		.loc 1 77 0
 188 0028 4FF40063 		mov	r3, #2048
 189 002c ADF80430 		strh	r3, [sp, #4]	@ movhi
  78:./module/src/usart.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	//浮空输入
 190              		.loc 1 78 0
 191 0030 0423     		movs	r3, #4
 192 0032 8DF80730 		strb	r3, [sp, #7]
  79:./module/src/usart.c **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);   //初始化GPIOA
 193              		.loc 1 79 0
 194 0036 0DEB0301 		add	r1, sp, r3
 195 003a 0548     		ldr	r0, .L11+8
 196 003c FFF7FEFF 		bl	GPIO_Init
 197              	.LVL8:
  80:./module/src/usart.c **** }
 198              		.loc 1 80 0
 199 0040 03B0     		add	sp, sp, #12
 200              	.LCFI8:
 201              		.cfi_def_cfa_offset 4
 202              		@ sp needed
 203 0042 5DF804FB 		ldr	pc, [sp], #4
 204              	.L12:
 205 0046 00BF     		.align	2
 206              	.L11:
 207 0048 08000400 		.word	262152
 208 004c 00080140 		.word	1073809408
 209 0050 000C0140 		.word	1073810432
 210              		.cfi_endproc
ARM GAS  /tmp/ccp705Ch.s 			page 6


 211              	.LFE32:
 213              		.section	.text.USARTx_Config,"ax",%progbits
 214              		.align	2
 215              		.global	USARTx_Config
 216              		.thumb
 217              		.thumb_func
 219              	USARTx_Config:
 220              	.LFB33:
  81:./module/src/usart.c **** /*USARTx配置函数*/
  82:./module/src/usart.c **** void USARTx_Config(USART_TypeDef *USARTx,int USART_BaudRate)
  83:./module/src/usart.c **** {	
 221              		.loc 1 83 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 16
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              	.LVL9:
 226 0000 30B5     		push	{r4, r5, lr}
 227              	.LCFI9:
 228              		.cfi_def_cfa_offset 12
 229              		.cfi_offset 4, -12
 230              		.cfi_offset 5, -8
 231              		.cfi_offset 14, -4
 232 0002 85B0     		sub	sp, sp, #20
 233              	.LCFI10:
 234              		.cfi_def_cfa_offset 32
 235 0004 0446     		mov	r4, r0
 236 0006 0D46     		mov	r5, r1
  84:./module/src/usart.c **** 	USART_InitTypeDef USART_InitStructure;
  85:./module/src/usart.c **** 	if(USARTx==USART1)
 237              		.loc 1 85 0
 238 0008 184B     		ldr	r3, .L20
 239 000a 9842     		cmp	r0, r3
 240 000c 01D1     		bne	.L14
  86:./module/src/usart.c **** 		USART1_GPIO_Config();
 241              		.loc 1 86 0
 242 000e FFF7FEFF 		bl	USART1_GPIO_Config
 243              	.LVL10:
 244              	.L14:
  87:./module/src/usart.c **** 	if(USARTx==USART2)
 245              		.loc 1 87 0
 246 0012 174B     		ldr	r3, .L20+4
 247 0014 9C42     		cmp	r4, r3
 248 0016 01D1     		bne	.L15
  88:./module/src/usart.c **** 		USART2_GPIO_Config();
 249              		.loc 1 88 0
 250 0018 FFF7FEFF 		bl	USART2_GPIO_Config
 251              	.LVL11:
 252              	.L15:
  89:./module/src/usart.c **** 	if(USARTx==USART3)
 253              		.loc 1 89 0
 254 001c 154B     		ldr	r3, .L20+8
 255 001e 9C42     		cmp	r4, r3
 256 0020 01D1     		bne	.L16
  90:./module/src/usart.c **** 		USART3_GPIO_Config();
 257              		.loc 1 90 0
 258 0022 FFF7FEFF 		bl	USART3_GPIO_Config
 259              	.LVL12:
ARM GAS  /tmp/ccp705Ch.s 			page 7


 260              	.L16:
  91:./module/src/usart.c **** 	if(IS_USART_123_PERIPH(USARTx))
 261              		.loc 1 91 0
 262 0026 114B     		ldr	r3, .L20
 263 0028 9C42     		cmp	r4, r3
 264 002a 07D0     		beq	.L17
 265              		.loc 1 91 0 is_stmt 0 discriminator 1
 266 002c A3F57443 		sub	r3, r3, #62464
 267 0030 9C42     		cmp	r4, r3
 268 0032 03D0     		beq	.L17
 269              		.loc 1 91 0 discriminator 2
 270 0034 03F58063 		add	r3, r3, #1024
 271 0038 9C42     		cmp	r4, r3
 272 003a 14D1     		bne	.L13
 273              	.L17:
  92:./module/src/usart.c **** 	{
  93:./module/src/usart.c **** 		/* USARTx 工作模式配置 */
  94:./module/src/usart.c **** 		USART_InitStructure.USART_BaudRate = USART_BaudRate;	//波特率设置
 274              		.loc 1 94 0 is_stmt 1
 275 003c 0095     		str	r5, [sp]
  95:./module/src/usart.c **** 		USART_InitStructure.USART_WordLength = USART_WordLength_8b;	//数据位数设置：8位
 276              		.loc 1 95 0
 277 003e 0023     		movs	r3, #0
 278 0040 ADF80430 		strh	r3, [sp, #4]	@ movhi
  96:./module/src/usart.c **** 		USART_InitStructure.USART_StopBits = USART_StopBits_1; 	//停止位设置：1位
 279              		.loc 1 96 0
 280 0044 ADF80630 		strh	r3, [sp, #6]	@ movhi
  97:./module/src/usart.c **** 		USART_InitStructure.USART_Parity = USART_Parity_No ;  //是否奇偶校验：无
 281              		.loc 1 97 0
 282 0048 ADF80830 		strh	r3, [sp, #8]	@ movhi
  98:./module/src/usart.c **** 		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;	//硬件流控制
 283              		.loc 1 98 0
 284 004c ADF80C30 		strh	r3, [sp, #12]	@ movhi
  99:./module/src/usart.c **** 		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;//接收与发送都使能
 285              		.loc 1 99 0
 286 0050 0C23     		movs	r3, #12
 287 0052 ADF80A30 		strh	r3, [sp, #10]	@ movhi
 100:./module/src/usart.c **** 		USART_Init(USARTx, &USART_InitStructure);  //初始化USART1
 288              		.loc 1 100 0
 289 0056 6946     		mov	r1, sp
 290 0058 2046     		mov	r0, r4
 291 005a FFF7FEFF 		bl	USART_Init
 292              	.LVL13:
 101:./module/src/usart.c **** 		USART_Cmd(USARTx, ENABLE);// USART1使能
 293              		.loc 1 101 0
 294 005e 0121     		movs	r1, #1
 295 0060 2046     		mov	r0, r4
 296 0062 FFF7FEFF 		bl	USART_Cmd
 297              	.LVL14:
 298              	.L13:
 102:./module/src/usart.c **** 	}
 103:./module/src/usart.c **** }
 299              		.loc 1 103 0
 300 0066 05B0     		add	sp, sp, #20
 301              	.LCFI11:
 302              		.cfi_def_cfa_offset 12
 303              		@ sp needed
ARM GAS  /tmp/ccp705Ch.s 			page 8


 304 0068 30BD     		pop	{r4, r5, pc}
 305              	.LVL15:
 306              	.L21:
 307 006a 00BF     		.align	2
 308              	.L20:
 309 006c 00380140 		.word	1073821696
 310 0070 00440040 		.word	1073759232
 311 0074 00480040 		.word	1073760256
 312              		.cfi_endproc
 313              	.LFE33:
 315              		.section	.text.USARTx_NVIC_Config,"ax",%progbits
 316              		.align	2
 317              		.global	USARTx_NVIC_Config
 318              		.thumb
 319              		.thumb_func
 321              	USARTx_NVIC_Config:
 322              	.LFB34:
 104:./module/src/usart.c **** /*USARTx中断配置函数*/
 105:./module/src/usart.c **** void USARTx_NVIC_Config(USART_TypeDef *USARTx,uint32_t PreemptPriority, uint32_t SubPriority)
 106:./module/src/usart.c **** {
 323              		.loc 1 106 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              	.LVL16:
 328 0000 70B5     		push	{r4, r5, r6, lr}
 329              	.LCFI12:
 330              		.cfi_def_cfa_offset 16
 331              		.cfi_offset 4, -16
 332              		.cfi_offset 5, -12
 333              		.cfi_offset 6, -8
 334              		.cfi_offset 14, -4
 335 0002 0446     		mov	r4, r0
 336 0004 0D46     		mov	r5, r1
 337 0006 1646     		mov	r6, r2
 107:./module/src/usart.c **** 	if(USARTx==USART1)
 338              		.loc 1 107 0
 339 0008 134B     		ldr	r3, .L29
 340 000a 9842     		cmp	r0, r3
 341 000c 02D1     		bne	.L23
 108:./module/src/usart.c **** 		STM32_NVIC_SetPriority(USART1_IRQn,PreemptPriority,SubPriority);
 342              		.loc 1 108 0
 343 000e 2520     		movs	r0, #37
 344              	.LVL17:
 345 0010 FFF7FEFF 		bl	STM32_NVIC_SetPriority
 346              	.LVL18:
 347              	.L23:
 109:./module/src/usart.c **** 	if(USARTx==USART2)
 348              		.loc 1 109 0
 349 0014 114B     		ldr	r3, .L29+4
 350 0016 9C42     		cmp	r4, r3
 351 0018 04D1     		bne	.L24
 110:./module/src/usart.c **** 		STM32_NVIC_SetPriority(USART1_IRQn,PreemptPriority,SubPriority);
 352              		.loc 1 110 0
 353 001a 3246     		mov	r2, r6
 354 001c 2946     		mov	r1, r5
 355 001e 2520     		movs	r0, #37
ARM GAS  /tmp/ccp705Ch.s 			page 9


 356 0020 FFF7FEFF 		bl	STM32_NVIC_SetPriority
 357              	.LVL19:
 358              	.L24:
 111:./module/src/usart.c **** 	if(USARTx==USART3)
 359              		.loc 1 111 0
 360 0024 0E4B     		ldr	r3, .L29+8
 361 0026 9C42     		cmp	r4, r3
 362 0028 04D1     		bne	.L25
 112:./module/src/usart.c **** 		STM32_NVIC_SetPriority(USART1_IRQn,PreemptPriority,SubPriority);
 363              		.loc 1 112 0
 364 002a 3246     		mov	r2, r6
 365 002c 2946     		mov	r1, r5
 366 002e 2520     		movs	r0, #37
 367 0030 FFF7FEFF 		bl	STM32_NVIC_SetPriority
 368              	.LVL20:
 369              	.L25:
 113:./module/src/usart.c **** 	if(IS_USART_123_PERIPH(USARTx))
 370              		.loc 1 113 0
 371 0034 084B     		ldr	r3, .L29
 372 0036 9C42     		cmp	r4, r3
 373 0038 07D0     		beq	.L26
 374              		.loc 1 113 0 is_stmt 0 discriminator 1
 375 003a A3F57443 		sub	r3, r3, #62464
 376 003e 9C42     		cmp	r4, r3
 377 0040 03D0     		beq	.L26
 378              		.loc 1 113 0 discriminator 2
 379 0042 03F58063 		add	r3, r3, #1024
 380 0046 9C42     		cmp	r4, r3
 381 0048 05D1     		bne	.L22
 382              	.L26:
 114:./module/src/usart.c **** 		USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 383              		.loc 1 114 0 is_stmt 1
 384 004a 0122     		movs	r2, #1
 385 004c 40F22551 		movw	r1, #1317
 386 0050 0148     		ldr	r0, .L29
 387 0052 FFF7FEFF 		bl	USART_ITConfig
 388              	.LVL21:
 389              	.L22:
 390 0056 70BD     		pop	{r4, r5, r6, pc}
 391              	.LVL22:
 392              	.L30:
 393              		.align	2
 394              	.L29:
 395 0058 00380140 		.word	1073821696
 396 005c 00440040 		.word	1073759232
 397 0060 00480040 		.word	1073760256
 398              		.cfi_endproc
 399              	.LFE34:
 401              		.section	.text.USARTx_SendByte,"ax",%progbits
 402              		.align	2
 403              		.global	USARTx_SendByte
 404              		.thumb
 405              		.thumb_func
 407              	USARTx_SendByte:
 408              	.LFB35:
 115:./module/src/usart.c **** }
 116:./module/src/usart.c **** 
ARM GAS  /tmp/ccp705Ch.s 			page 10


 117:./module/src/usart.c **** 
 118:./module/src/usart.c ****  /*发送一个字节数据*/
 119:./module/src/usart.c **** void USARTx_SendByte(USART_TypeDef *USARTx,unsigned char SendData)
 120:./module/src/usart.c **** {	   
 409              		.loc 1 120 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              	.LVL23:
 414 0000 10B5     		push	{r4, lr}
 415              	.LCFI13:
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 4, -8
 418              		.cfi_offset 14, -4
 419 0002 0446     		mov	r4, r0
 121:./module/src/usart.c **** 	USART_SendData(USARTx,SendData);
 420              		.loc 1 121 0
 421 0004 FFF7FEFF 		bl	USART_SendData
 422              	.LVL24:
 423              	.L32:
 122:./module/src/usart.c **** 	while(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);	    
 424              		.loc 1 122 0 discriminator 1
 425 0008 8021     		movs	r1, #128
 426 000a 2046     		mov	r0, r4
 427 000c FFF7FEFF 		bl	USART_GetFlagStatus
 428              	.LVL25:
 429 0010 0028     		cmp	r0, #0
 430 0012 F9D0     		beq	.L32
 123:./module/src/usart.c **** }	
 431              		.loc 1 123 0
 432 0014 10BD     		pop	{r4, pc}
 433              		.cfi_endproc
 434              	.LFE35:
 436 0016 00BF     		.section	.text.USARTx_SendString,"ax",%progbits
 437              		.align	2
 438              		.global	USARTx_SendString
 439              		.thumb
 440              		.thumb_func
 442              	USARTx_SendString:
 443              	.LFB36:
 124:./module/src/usart.c **** 
 125:./module/src/usart.c ****  /*发送一个字符串数据*/
 126:./module/src/usart.c **** u32 USARTx_SendString(USART_TypeDef *USARTx,char *SendString)
 127:./module/src/usart.c **** {
 444              		.loc 1 127 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              	.LVL26:
 449 0000 70B5     		push	{r4, r5, r6, lr}
 450              	.LCFI14:
 451              		.cfi_def_cfa_offset 16
 452              		.cfi_offset 4, -16
 453              		.cfi_offset 5, -12
 454              		.cfi_offset 6, -8
 455              		.cfi_offset 14, -4
 456 0002 0646     		mov	r6, r0
ARM GAS  /tmp/ccp705Ch.s 			page 11


 457 0004 0C46     		mov	r4, r1
 458              	.LVL27:
 128:./module/src/usart.c **** 	u32 count=0;
 459              		.loc 1 128 0
 460 0006 0025     		movs	r5, #0
 129:./module/src/usart.c **** 	while(*SendString != '\0')
 461              		.loc 1 129 0
 462 0008 04E0     		b	.L35
 463              	.LVL28:
 464              	.L36:
 130:./module/src/usart.c **** 	{
 131:./module/src/usart.c **** 		USARTx_SendByte(USARTx,(u8)*SendString);
 465              		.loc 1 131 0
 466 000a 3046     		mov	r0, r6
 467 000c FFF7FEFF 		bl	USARTx_SendByte
 468              	.LVL29:
 132:./module/src/usart.c **** 		SendString++;
 469              		.loc 1 132 0
 470 0010 0134     		adds	r4, r4, #1
 471              	.LVL30:
 133:./module/src/usart.c **** 		count++;
 472              		.loc 1 133 0
 473 0012 0135     		adds	r5, r5, #1
 474              	.LVL31:
 475              	.L35:
 129:./module/src/usart.c **** 	{
 476              		.loc 1 129 0
 477 0014 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 478 0016 0029     		cmp	r1, #0
 479 0018 F7D1     		bne	.L36
 134:./module/src/usart.c **** 	}
 135:./module/src/usart.c **** 	return count;
 136:./module/src/usart.c **** }
 480              		.loc 1 136 0
 481 001a 2846     		mov	r0, r5
 482 001c 70BD     		pop	{r4, r5, r6, pc}
 483              		.cfi_endproc
 484              	.LFE36:
 486 001e 00BF     		.section	.text._write,"ax",%progbits
 487              		.align	2
 488              		.global	_write
 489              		.thumb
 490              		.thumb_func
 492              	_write:
 493              	.LFB37:
 137:./module/src/usart.c **** /*printf底层调用代码*/
 138:./module/src/usart.c **** int _write(int fd, char *ptr, int len)
 139:./module/src/usart.c **** {
 494              		.loc 1 139 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              	.LVL32:
 140:./module/src/usart.c ****     int i = 0;
 141:./module/src/usart.c **** 
 142:./module/src/usart.c ****     /*
 143:./module/src/usart.c ****      * write "len" of char from "ptr" to file id "fd"
ARM GAS  /tmp/ccp705Ch.s 			page 12


 144:./module/src/usart.c ****      * Return number of char written.
 145:./module/src/usart.c ****      *
 146:./module/src/usart.c ****     * Only work for STDOUT, STDIN, and STDERR
 147:./module/src/usart.c ****      */
 148:./module/src/usart.c ****     if (fd > 2)
 499              		.loc 1 148 0
 500 0000 0228     		cmp	r0, #2
 501 0002 16DC     		bgt	.L43
 139:./module/src/usart.c ****     int i = 0;
 502              		.loc 1 139 0
 503 0004 70B5     		push	{r4, r5, r6, lr}
 504              	.LCFI15:
 505              		.cfi_def_cfa_offset 16
 506              		.cfi_offset 4, -16
 507              		.cfi_offset 5, -12
 508              		.cfi_offset 6, -8
 509              		.cfi_offset 14, -4
 510 0006 0C46     		mov	r4, r1
 511 0008 1646     		mov	r6, r2
 512 000a 0025     		movs	r5, #0
 513 000c 0BE0     		b	.L40
 514              	.LVL33:
 515              	.L42:
 149:./module/src/usart.c ****     {
 150:./module/src/usart.c ****         return -1;
 151:./module/src/usart.c ****     }
 152:./module/src/usart.c **** 
 153:./module/src/usart.c ****     while (*ptr && (i < len))
 154:./module/src/usart.c ****     {
 155:./module/src/usart.c ****         USARTx_SendByte(USART1, *ptr);
 516              		.loc 1 155 0
 517 000e 0B48     		ldr	r0, .L46
 518 0010 FFF7FEFF 		bl	USARTx_SendByte
 519              	.LVL34:
 156:./module/src/usart.c **** 
 157:./module/src/usart.c ****         if (*ptr == '\n')
 520              		.loc 1 157 0
 521 0014 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 522 0016 0A2B     		cmp	r3, #10
 523 0018 03D1     		bne	.L41
 158:./module/src/usart.c ****         {
 159:./module/src/usart.c ****             USARTx_SendByte(USART1, '\r');
 524              		.loc 1 159 0
 525 001a 0D21     		movs	r1, #13
 526 001c 0748     		ldr	r0, .L46
 527 001e FFF7FEFF 		bl	USARTx_SendByte
 528              	.LVL35:
 529              	.L41:
 160:./module/src/usart.c ****         }
 161:./module/src/usart.c **** 
 162:./module/src/usart.c ****         i++;
 530              		.loc 1 162 0
 531 0022 0135     		adds	r5, r5, #1
 532              	.LVL36:
 163:./module/src/usart.c ****         ptr++;
 533              		.loc 1 163 0
 534 0024 0134     		adds	r4, r4, #1
ARM GAS  /tmp/ccp705Ch.s 			page 13


 535              	.LVL37:
 536              	.L40:
 153:./module/src/usart.c ****     {
 537              		.loc 1 153 0
 538 0026 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 539 0028 31B1     		cbz	r1, .L44
 153:./module/src/usart.c ****     {
 540              		.loc 1 153 0 is_stmt 0 discriminator 1
 541 002a B542     		cmp	r5, r6
 542 002c EFDB     		blt	.L42
 164:./module/src/usart.c ****     }
 165:./module/src/usart.c **** 
 166:./module/src/usart.c ****     return i;
 543              		.loc 1 166 0 is_stmt 1
 544 002e 2846     		mov	r0, r5
 545 0030 70BD     		pop	{r4, r5, r6, pc}
 546              	.LVL38:
 547              	.L43:
 548              	.LCFI16:
 549              		.cfi_def_cfa_offset 0
 550              		.cfi_restore 4
 551              		.cfi_restore 5
 552              		.cfi_restore 6
 553              		.cfi_restore 14
 150:./module/src/usart.c ****     }
 554              		.loc 1 150 0
 555 0032 4FF0FF30 		mov	r0, #-1
 556              	.LVL39:
 167:./module/src/usart.c **** }
 557              		.loc 1 167 0
 558 0036 7047     		bx	lr
 559              	.LVL40:
 560              	.L44:
 561              	.LCFI17:
 562              		.cfi_def_cfa_offset 16
 563              		.cfi_offset 4, -16
 564              		.cfi_offset 5, -12
 565              		.cfi_offset 6, -8
 566              		.cfi_offset 14, -4
 166:./module/src/usart.c **** }
 567              		.loc 1 166 0
 568 0038 2846     		mov	r0, r5
 569              		.loc 1 167 0
 570 003a 70BD     		pop	{r4, r5, r6, pc}
 571              	.LVL41:
 572              	.L47:
 573              		.align	2
 574              	.L46:
 575 003c 00380140 		.word	1073821696
 576              		.cfi_endproc
 577              	.LFE37:
 579              		.section	.text.USART1_IRQHandler,"ax",%progbits
 580              		.align	2
 581              		.global	USART1_IRQHandler
 582              		.thumb
 583              		.thumb_func
 585              	USART1_IRQHandler:
ARM GAS  /tmp/ccp705Ch.s 			page 14


 586              	.LFB38:
 168:./module/src/usart.c **** 
 169:./module/src/usart.c **** /* USART1_IRQHandler中断服务函数 */
 170:./module/src/usart.c **** void USART1_IRQHandler(void)
 171:./module/src/usart.c **** {
 587              		.loc 1 171 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591 0000 38B5     		push	{r3, r4, r5, lr}
 592              	.LCFI18:
 593              		.cfi_def_cfa_offset 16
 594              		.cfi_offset 3, -16
 595              		.cfi_offset 4, -12
 596              		.cfi_offset 5, -8
 597              		.cfi_offset 14, -4
 172:./module/src/usart.c ****     if (USART_GetFlagStatus(USART1,USART_IT_RXNE) && !USART1_RX_FLAG)
 598              		.loc 1 172 0
 599 0002 40F22551 		movw	r1, #1317
 600 0006 0E48     		ldr	r0, .L51
 601 0008 FFF7FEFF 		bl	USART_GetFlagStatus
 602              	.LVL42:
 603 000c B0B1     		cbz	r0, .L48
 604              		.loc 1 172 0 is_stmt 0 discriminator 1
 605 000e 0D4B     		ldr	r3, .L51+4
 606 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 607 0012 9BB9     		cbnz	r3, .L48
 173:./module/src/usart.c ****     {
 174:./module/src/usart.c **** 		START_TIME(TIM2);
 608              		.loc 1 174 0 is_stmt 1
 609 0014 0121     		movs	r1, #1
 610 0016 4FF08040 		mov	r0, #1073741824
 611 001a FFF7FEFF 		bl	TIM_Cmd
 612              	.LVL43:
 613 001e 0021     		movs	r1, #0
 614 0020 4FF08040 		mov	r0, #1073741824
 615 0024 FFF7FEFF 		bl	TIM_SetCounter
 616              	.LVL44:
 175:./module/src/usart.c **** 		USART1_RX_BUFF[USART1_RX_COUNT]=USART_ReceiveData(USART1);
 617              		.loc 1 175 0
 618 0028 074C     		ldr	r4, .L51+8
 619 002a 2568     		ldr	r5, [r4]
 620 002c 0448     		ldr	r0, .L51
 621 002e FFF7FEFF 		bl	USART_ReceiveData
 622              	.LVL45:
 623 0032 064B     		ldr	r3, .L51+12
 624 0034 5855     		strb	r0, [r3, r5]
 176:./module/src/usart.c **** 		USART1_RX_COUNT++;
 625              		.loc 1 176 0
 626 0036 2368     		ldr	r3, [r4]
 627 0038 0133     		adds	r3, r3, #1
 628 003a 2360     		str	r3, [r4]
 629              	.L48:
 630 003c 38BD     		pop	{r3, r4, r5, pc}
 631              	.L52:
 632 003e 00BF     		.align	2
 633              	.L51:
ARM GAS  /tmp/ccp705Ch.s 			page 15


 634 0040 00380140 		.word	1073821696
 635 0044 00000000 		.word	.LANCHOR0
 636 0048 00000000 		.word	.LANCHOR1
 637 004c 00000000 		.word	USART1_RX_BUFF
 638              		.cfi_endproc
 639              	.LFE38:
 641              		.global	USART3_RX_COUNT
 642              		.comm	USART3_RX_BUFF,64,4
 643              		.global	USART3_RX_FLAG
 644              		.global	USART2_RX_COUNT
 645              		.comm	USART2_RX_BUFF,64,4
 646              		.global	USART2_RX_FLAG
 647              		.global	USART1_RX_COUNT
 648              		.comm	USART1_RX_BUFF,64,4
 649              		.global	USART1_RX_FLAG
 650              		.section	.bss.USART1_RX_COUNT,"aw",%nobits
 651              		.align	2
 652              		.set	.LANCHOR1,. + 0
 655              	USART1_RX_COUNT:
 656 0000 00000000 		.space	4
 657              		.section	.bss.USART3_RX_FLAG,"aw",%nobits
 660              	USART3_RX_FLAG:
 661 0000 00       		.space	1
 662              		.section	.bss.USART1_RX_FLAG,"aw",%nobits
 663              		.set	.LANCHOR0,. + 0
 666              	USART1_RX_FLAG:
 667 0000 00       		.space	1
 668              		.section	.bss.USART2_RX_COUNT,"aw",%nobits
 669              		.align	2
 672              	USART2_RX_COUNT:
 673 0000 00000000 		.space	4
 674              		.section	.bss.USART2_RX_FLAG,"aw",%nobits
 677              	USART2_RX_FLAG:
 678 0000 00       		.space	1
 679              		.section	.bss.USART3_RX_COUNT,"aw",%nobits
 680              		.align	2
 683              	USART3_RX_COUNT:
 684 0000 00000000 		.space	4
 685              		.text
 686              	.Letext0:
 687              		.file 2 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 688              		.file 3 "/opt/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 689              		.file 4 "cmsis/stm32f10x.h"
 690              		.file 5 "libraries/inc/stm32f10x_gpio.h"
 691              		.file 6 "libraries/inc/stm32f10x_usart.h"
 692              		.file 7 "cmsis/core_cm3.h"
 693              		.file 8 "libraries/inc/stm32f10x_rcc.h"
 694              		.file 9 "module/inc/sys.h"
 695              		.file 10 "libraries/inc/stm32f10x_tim.h"
ARM GAS  /tmp/ccp705Ch.s 			page 16


DEFINED SYMBOLS
                            *ABS*:00000000 usart.c
     /tmp/ccp705Ch.s:20     .text.USART1_GPIO_Config:00000000 $t
     /tmp/ccp705Ch.s:25     .text.USART1_GPIO_Config:00000000 USART1_GPIO_Config
     /tmp/ccp705Ch.s:80     .text.USART1_GPIO_Config:00000048 $d
     /tmp/ccp705Ch.s:85     .text.USART2_GPIO_Config:00000000 $t
     /tmp/ccp705Ch.s:90     .text.USART2_GPIO_Config:00000000 USART2_GPIO_Config
     /tmp/ccp705Ch.s:144    .text.USART2_GPIO_Config:00000044 $d
     /tmp/ccp705Ch.s:150    .text.USART3_GPIO_Config:00000000 $t
     /tmp/ccp705Ch.s:155    .text.USART3_GPIO_Config:00000000 USART3_GPIO_Config
     /tmp/ccp705Ch.s:207    .text.USART3_GPIO_Config:00000048 $d
     /tmp/ccp705Ch.s:214    .text.USARTx_Config:00000000 $t
     /tmp/ccp705Ch.s:219    .text.USARTx_Config:00000000 USARTx_Config
     /tmp/ccp705Ch.s:309    .text.USARTx_Config:0000006c $d
     /tmp/ccp705Ch.s:316    .text.USARTx_NVIC_Config:00000000 $t
     /tmp/ccp705Ch.s:321    .text.USARTx_NVIC_Config:00000000 USARTx_NVIC_Config
     /tmp/ccp705Ch.s:395    .text.USARTx_NVIC_Config:00000058 $d
     /tmp/ccp705Ch.s:402    .text.USARTx_SendByte:00000000 $t
     /tmp/ccp705Ch.s:407    .text.USARTx_SendByte:00000000 USARTx_SendByte
     /tmp/ccp705Ch.s:437    .text.USARTx_SendString:00000000 $t
     /tmp/ccp705Ch.s:442    .text.USARTx_SendString:00000000 USARTx_SendString
     /tmp/ccp705Ch.s:487    .text._write:00000000 $t
     /tmp/ccp705Ch.s:492    .text._write:00000000 _write
     /tmp/ccp705Ch.s:575    .text._write:0000003c $d
     /tmp/ccp705Ch.s:580    .text.USART1_IRQHandler:00000000 $t
     /tmp/ccp705Ch.s:585    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/ccp705Ch.s:634    .text.USART1_IRQHandler:00000040 $d
                            *COM*:00000040 USART1_RX_BUFF
     /tmp/ccp705Ch.s:683    .bss.USART3_RX_COUNT:00000000 USART3_RX_COUNT
                            *COM*:00000040 USART3_RX_BUFF
     /tmp/ccp705Ch.s:660    .bss.USART3_RX_FLAG:00000000 USART3_RX_FLAG
     /tmp/ccp705Ch.s:672    .bss.USART2_RX_COUNT:00000000 USART2_RX_COUNT
                            *COM*:00000040 USART2_RX_BUFF
     /tmp/ccp705Ch.s:677    .bss.USART2_RX_FLAG:00000000 USART2_RX_FLAG
     /tmp/ccp705Ch.s:655    .bss.USART1_RX_COUNT:00000000 USART1_RX_COUNT
     /tmp/ccp705Ch.s:666    .bss.USART1_RX_FLAG:00000000 USART1_RX_FLAG
     /tmp/ccp705Ch.s:651    .bss.USART1_RX_COUNT:00000000 $d
     /tmp/ccp705Ch.s:661    .bss.USART3_RX_FLAG:00000000 $d
     /tmp/ccp705Ch.s:667    .bss.USART1_RX_FLAG:00000000 $d
     /tmp/ccp705Ch.s:669    .bss.USART2_RX_COUNT:00000000 $d
     /tmp/ccp705Ch.s:678    .bss.USART2_RX_FLAG:00000000 $d
     /tmp/ccp705Ch.s:680    .bss.USART3_RX_COUNT:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphClockCmd
GPIO_Init
USART_Init
USART_Cmd
STM32_NVIC_SetPriority
USART_ITConfig
USART_SendData
USART_GetFlagStatus
TIM_Cmd
TIM_SetCounter
USART_ReceiveData
